{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","seen","has","codes","add","set","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","PROPERTYACCESS","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","classInstance","payloadSize","writeI32","id","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","INTERFACE","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","base","inheritedTypeArguments","baseName","baseType","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","ExpressionId","SideEffects","FeatureFlags","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","Unreachable","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","result","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","getSideEffects","_BinaryenExpressionGetSideEffects","u8s","numValues","i32s","val","__i32_store","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinNames","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","Exnref","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","features","noUnsafe","pedantic","feature","Constraints","RuntimeFeatures","argumentsLength","setArgumentsLength","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","runtimeFeatures","skippedAutoreleases","inlineStack","lazyLibraryFunctions","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","nativeParams","nativeResults","flatten","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileFunction","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureBuiltinArgumentsLength","COMPILED","internalGetterName","internalSetterName","isUnmanaged","subPrefix","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","compileExpression","nativeType","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","origInitExpr","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","isManaged","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","local_get","compileFunctionBody","performAutoreleases","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","temp","nativeSizeType","unary","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","load","makeReplace","store","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","makeIsTrueish","evaluateConditionKind","hasSideEffects","drop","tcond","hasIncompatibleLocalStates","popBreakLabel","doCompileWhileStatement","hasScopedLocals","loop","doCompileForStatement","loopLabel","condKind","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","unset","newArgs","makeAbort","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","local_tee","retainLeftInElse","delayAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","tempDataStart","arrayType","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseClass","baseCtor","allocExpr","theEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","ref_is_null","thisLocalIndex","fieldPrototype","codeLocation","messageArg","filenameArg","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","resultType","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_avgr","AvgrU8x16","AvgrU16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","walk","TSDBuilder","unknown","numMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","map","isSet","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","ipos","dirname","origin","readI32","readI64","valueI64"],"mappings":"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A,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,sDACA,oDACA,sDACA,oDACA,sDACA,oDACA,uDA3GF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA8GnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAYC,GACV,6BACA,6BACA,6BACA,6BACA,6BALF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAQzB,SAAYC,GACV,uCACA,uCACA,uCACA,uCACA,qCACA,qCACA,uCACA,uCACA,uCACA,uCAVF,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAatB,MAAaC,EAKX,cAAcvW,EAAoBC,GAChC,IAAIuW,EAAU,IAAID,EAGlB,OAFAC,EAAQxW,OAASA,EACjBwW,EAAQv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,IACzB,IAAK,OAAQ,OAAOltC,EAAMmR,KAE5B,MAEF,KAAK,IACH,OAAQvS,GACN,IAAK,QAAS,OAAOoB,EAAMoR,MAC3B,IAAK,OAAQ,OAAOpR,EAAMmtC,KAE5B,MAEF,KAAK,IACH,OAAQvuC,GACN,IAAK,QAAS,OAAOoB,EAAMotC,OAKjC,OAAOptC,EAAMmU,QAGf,SAAgBk5B,EAAsBh5B,GACpC,OAAQA,GACN,KAAKrU,EAAM4iB,SACX,KAAK5iB,EAAMyrC,GACX,KAAKzrC,EAAMqN,YACX,KAAKrN,EAAM6kB,QACX,KAAK7kB,EAAMgsC,OACX,KAAKhsC,EAAMosC,KACX,KAAKpsC,EAAMiQ,IACX,KAAKjQ,EAAMoiB,IACX,KAAKpiB,EAAMwN,WACX,KAAKxN,EAAMusC,GACX,KAAKvsC,EAAMwsC,MACX,KAAKxsC,EAAM0sC,OACX,KAAK1sC,EAAMumB,UACX,KAAKvmB,EAAMQ,KACX,KAAKR,EAAM2iB,SACX,KAAK3iB,EAAMqiB,IACX,KAAKriB,EAAMgtC,KACX,KAAKhtC,EAAMmR,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYnR,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYurC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4C93C,GAE1C,OADA0J,OAAO1J,EAAKqL,QACJrL,EAAKyL,WAAW,IACtB,KAAK,IAAY,MAAe,UAARzL,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC4gB,GACpC,OAAQA,GACN,KAAKrU,EAAMgsC,OAAQ,MAAO,SAC1B,KAAKhsC,EAAMssC,GAAI,MAAO,KACtB,KAAKtsC,EAAMwN,WAAY,MAAO,aAC9B,KAAKxN,EAAMyN,IAAK,MAAO,MACvB,KAAKzN,EAAMitC,OAAQ,MAAO,SAC1B,KAAKjtC,EAAMmR,KAAM,MAAO,OACxB,KAAKnR,EAAMotC,MAAO,MAAO,QACzB,KAAKptC,EAAMstC,YAAa,MAAO,MAC/B,KAAKttC,EAAMoN,MAAO,MAAO,IACzB,KAAKpN,EAAMgW,SAAU,MAAO,IAC5B,KAAKhW,EAAM8V,YAAa,MAAO,IAC/B,KAAK9V,EAAMiW,gBAAiB,MAAO,KACnC,KAAKjW,EAAM+V,mBAAoB,MAAO,KACtC,KAAK/V,EAAM4V,cAAe,MAAO,KACjC,KAAK5V,EAAM6V,mBAAoB,MAAO,KACtC,KAAK7V,EAAMutC,qBAAsB,MAAO,MACxC,KAAKvtC,EAAMwtC,0BAA2B,MAAO,MAC7C,KAAKxtC,EAAM2T,KAAM,MAAO,IACxB,KAAK3T,EAAM6T,MAAO,MAAO,IACzB,KAAK7T,EAAM8U,kBAAmB,MAAO,KACrC,KAAK9U,EAAMwU,SAAU,MAAO,IAC5B,KAAKxU,EAAM0U,MAAO,MAAO,IACzB,KAAK1U,EAAM4U,QAAS,MAAO,IAC3B,KAAK5U,EAAMqW,UAAW,MAAO,KAC7B,KAAKrW,EAAMsW,YAAa,MAAO,KAC/B,KAAKtW,EAAMsV,kBAAmB,MAAO,KACrC,KAAKtV,EAAMwV,wBAAyB,MAAO,KAC3C,KAAKxV,EAAM0V,oCAAqC,MAAO,MACvD,KAAK1V,EAAMgV,UAAW,MAAO,IAC7B,KAAKhV,EAAMkV,IAAK,MAAO,IACvB,KAAKlV,EAAMoV,MAAO,MAAO,IACzB,KAAKpV,EAAMmW,YAAa,MAAO,IAC/B,KAAKnW,EAAMoW,MAAO,MAAO,IACzB,KAAKpW,EAAMytC,oBAAqB,MAAO,KACvC,KAAKztC,EAAM0tC,QAAS,MAAO,KAC3B,KAAK1tC,EAAM2tC,OAAQ,MAAO,IAC1B,KAAK3tC,EAAMsU,YAAa,MAAO,KAC/B,KAAKtU,EAAMuU,aAAc,MAAO,KAChC,KAAKvU,EAAMyU,gBAAiB,MAAO,KACnC,KAAKzU,EAAM+U,yBAA0B,MAAO,MAC5C,KAAK/U,EAAM2U,aAAc,MAAO,KAChC,KAAK3U,EAAM6U,eAAgB,MAAO,KAClC,KAAK7U,EAAMuV,yBAA0B,MAAO,MAC5C,KAAKvV,EAAMyV,+BAAgC,MAAO,MAClD,KAAKzV,EAAM2V,2CAA4C,MAAO,OAC9D,KAAK3V,EAAMiV,iBAAkB,MAAO,KACpC,KAAKjV,EAAMmV,WAAY,MAAO,KAC9B,KAAKnV,EAAMqV,aAAc,MAAO,KAChC,QAEE,OADAlY,QAAO,GACA,KAKb,MAAa8C,EAUX,YAAY3B,EAAgBS,EAAYC,GA6CxC,KAAA6qB,aAAsB,EA5CpBh3B,KAAKyL,OAASA,EACdzL,KAAKkM,MAAQA,EACblM,KAAKmM,IAAMA,EAGb,YAAY42B,EAAUC,GACpB,GAAID,EAAEt3B,QAAUu3B,EAAEv3B,OAAQ,MAAM,IAAI9C,MAAM,mBAC1C,OAAO,IAAIyE,EAAM21B,EAAEt3B,OACjBs3B,EAAE72B,MAAQ82B,EAAE92B,MAAQ62B,EAAE72B,MAAQ82B,EAAE92B,MAChC62B,EAAE52B,IAAM62B,EAAE72B,IAAM42B,EAAE52B,IAAM62B,EAAE72B,KAI9B,cACE,OAAO,IAAIiB,EAAMpN,KAAKyL,OAAQzL,KAAKkM,MAAOlM,KAAKkM,OAGjD,YACE,OAAO,IAAIkB,EAAMpN,KAAKyL,OAAQzL,KAAKmM,IAAKnM,KAAKmM,KAG/C,WACE,IAAIJ,EAAO/L,KAAKyL,OAAOM,KACnBJ,EAAO,EACX,IAAK,IAAImQ,EAAM9b,KAAKkM,MAAO4P,GAAO,IAAKA,EACT,IAAxB/P,EAAKM,WAAWyP,IAA2BnQ,IAEjD,OAAOA,EAGT,aACE,IAAII,EAAO/L,KAAKyL,OAAOM,KACnBH,EAAS,EACb,IAAK,IAAIkQ,EAAM9b,KAAKkM,MAAQ,EAAG4P,GAAO,GACR,IAAxB/P,EAAKM,WAAWyP,KADqBA,IAEvClQ,EAEJ,OAAOA,EAGT,WACE,OAAO5L,KAAKyL,OAAOM,KAAKQ,UAAUvM,KAAKkM,MAAOlM,KAAKmM,MApDvD,UAgEA,MAAa4uC,UAAkB,EAAAn3B,kBAgB7B,YAAYnY,EAAgBkB,EAA0C,MACpE6O,MAAM7O,GAdR,KAAAR,IAAW,EAEX,KAAA2P,IAAW,EACX,KAAA0F,OAAgB,EAChB,KAAAw5B,SAAgB,EAEhB,KAAAC,WAAoB,EACpB,KAAAC,aAAoB,EACpB,KAAAC,oBAA2B,EAE3B,KAAAC,UAAmC,KAMjCp7C,KAAKyL,OAASA,EACdzL,KAAK8b,IAAM,EACX9b,KAAKmM,IAAMV,EAAOM,KAAKE,OACvBjM,KAAK2M,YAAcA,GAAe,IAAInF,MAEtC,IAAI2E,EAAMnM,KAAKmM,IACXJ,EAAON,EAAOM,KAWlB,GAPE/L,KAAK8b,IAAM3P,GACkB,OAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IAKP9b,KAAK8b,IAAM,EAAI3P,GACc,IAA7BJ,EAAKM,WAAWrM,KAAK8b,MACY,IAAjC/P,EAAKM,WAAWrM,KAAK8b,IAAM,GAG3B,IADA9b,KAAK8b,KAAO,EAEV9b,KAAK8b,IAAM3P,GACkB,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IAMb,KAAKu/B,EAAyC3C,EAAmBQ,SAE/D,OADAl5C,KAAKi7C,WAAa,EACXj7C,KAAKwhB,MAAQxhB,KAAKs7C,WAAWD,GAG9B,WACNA,EAAyC3C,EAAmBQ,QAC5DqC,EAAsBn4C,IAAIkmC,WAI1B,IAFA,IAAIn9B,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAChB/L,KAAK8b,IAAM3P,GAAK,CACrBnM,KAAKg7C,SAAWh7C,KAAK8b,IACrB,IAAIpb,EAAIqL,EAAKM,WAAWrM,KAAK8b,KAC7B,OAAQpb,GACN,KAAK,GACH,OACIV,KAAK8b,IAAM3P,GACgB,IAA7BJ,EAAKM,WAAWrM,KAAK8b,MACpB,MAGL,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,KACD9b,KAAK8b,IACP,MAEF,KAAK,GAEH,QADE9b,KAAK8b,IAELy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,GACJ,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IAELy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,GACJ,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA3O,EAAMwtC,2BAERxtC,EAAM6V,oBAER7V,EAAMmW,YAEf,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAOnW,EAAMquC,cAEf,KAAK,GAEH,QADEx7C,KAAK8b,IAELy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,GACJ,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA3O,EAAM6U,gBAER7U,EAAM4U,QAEf,KAAK,GAEH,KADE/hB,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMytC,oBAEf,GAAW,IAAPa,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMiV,iBAGjB,OAAOjV,EAAMgV,UAEf,KAAK,GAEH,QADEniB,KAAK8b,IACA3O,EAAMuuC,UAEf,KAAK,GAEH,QADE17C,KAAK8b,IACA3O,EAAMwuC,WAEf,KAAK,GAEH,KADE37C,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMyU,gBAEf,GAAW,IAAP65B,EAEF,QADEz7C,KAAK8b,IAELy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,GACJ,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA3O,EAAM+U,0BAER/U,EAAM8U,kBAGjB,OAAO9U,EAAMwU,SAEf,KAAK,GAEH,KADE3hB,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMqW,UAEf,GAAW,IAAPi4B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMsU,YAGjB,OAAOtU,EAAM2T,KAEf,KAAK,GAEH,QADE9gB,KAAK8b,IACA3O,EAAMoN,MAEf,KAAK,GAEH,KADEva,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMsW,YAEf,GAAW,IAAPg4B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMuU,aAGjB,OAAOvU,EAAM6T,MAEf,KAAK,GAEH,KADEhhB,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAI,EAAA8/B,eAAeH,GAEjB,QADEz7C,KAAK8b,IACA3O,EAAM0uC,aAEf,GACEN,EAAiB,GAAKv7C,KAAK8b,IAAM,EAAI3P,GAC9B,IAAPsvC,GACiC,IAAjC1vC,EAAKM,WAAWrM,KAAK8b,IAAM,GAG3B,OADA9b,KAAK8b,KAAO,EACL3O,EAAMstC,YAGjB,OAAOttC,EAAM2uC,IAEf,KAAK,GAAgB,CACnB,IAAIC,EAAkB/7C,KAAK8b,IAE3B,KADE9b,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAAuB,CACzB,IAAI3rC,EAAc,EAAA0J,YAAYwiC,KAQ9B,IANEh8C,KAAK8b,IAAM,EAAI3P,GACkB,IAAjCJ,EAAKM,WAAWrM,KAAK8b,IAAM,OAEzB9b,KAAK8b,IACPhM,EAAc,EAAA0J,YAAYyiC,UAEnBj8C,KAAK8b,IAAM3P,GAClB,GAAiC,IAA7BJ,EAAKM,WAAWrM,KAAK8b,KAA2B,GAChD9b,KAAK8b,IACP,MAGA9b,KAAKo7C,WACPp7C,KAAKo7C,UACHtrC,EACA/D,EAAKQ,UAAUwvC,EAAiB/7C,KAAK8b,KACrC9b,KAAKkL,MAAM6wC,EAAiB/7C,KAAK8b,MAGrC,MAEF,GAAW,IAAP2/B,EAA0B,CAC5B,IAAIS,GAAS,EACb,OAASl8C,KAAK8b,IAAM3P,GAElB,GADAzL,EAAIqL,EAAKM,WAAWrM,KAAK8b,KAElB,IAALpb,GACAV,KAAK8b,IAAM,EAAI3P,GACkB,IAAjCJ,EAAKM,WAAWrM,KAAK8b,IAAM,GAC3B,CACA9b,KAAK8b,KAAO,EACZogC,GAAS,EACT,MAGCA,EAKMl8C,KAAKo7C,WACdp7C,KAAKo7C,UACH,EAAA5hC,YAAY8C,MACZvQ,EAAKQ,UAAUwvC,EAAiB/7C,KAAK8b,KACrC9b,KAAKkL,MAAM6wC,EAAiB/7C,KAAK8b,MARnC9b,KAAK0oB,MACH,EAAA9d,eAAeuxC,YACfn8C,KAAKkL,MAAMlL,KAAK8b,KAAM,MAS1B,MAEF,GAAW,IAAP2/B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAM2U,aAGjB,OAAO3U,EAAM0U,MAEf,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAO7hB,KAAKo8C,cACRjvC,EAAMkvC,eACNlvC,EAAM0uC,aAEZ,KAAK,GAEH,QADE77C,KAAK8b,IACA3O,EAAMmvC,MAEf,KAAK,GAEH,QADEt8C,KAAK8b,IACA3O,EAAMovC,UAEf,KAAK,GAEH,KADEv8C,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAEF,QADEz7C,KAAK8b,IAELy/B,EAAiB,GACjBv7C,KAAK8b,IAAM3P,GACkB,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA3O,EAAMuV,0BAERvV,EAAMsV,kBAEf,GAAW,IAAPg5B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMiW,gBAGjB,OAAOjW,EAAMgW,SAEf,KAAK,GAEH,KADEnjB,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAEF,QADEz7C,KAAK8b,IAELy/B,EAAiB,GACjBv7C,KAAK8b,IAAM3P,GACkB,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA3O,EAAMutC,sBAERvtC,EAAM4V,cAEf,GAAW,IAAP04B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMqvC,mBAGjB,OAAOrvC,EAAM2tC,OAEf,KAAK,GAEH,KADE96C,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,IAAP2/B,EAA6B,CAE/B,KADEz7C,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CAExC,GADAsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAChB,IAAP2/B,EAEF,QADEz7C,KAAK8b,IAELy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,GACJ,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA3O,EAAM2V,4CAER3V,EAAM0V,oCAEf,GAAW,IAAP44B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMyV,+BAGjB,OAAOzV,EAAMwV,wBAEf,GAAW,IAAP84B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAM+V,mBAGjB,OAAO/V,EAAM8V,YAEf,KAAK,GAEH,QADEjjB,KAAK8b,IACA3O,EAAMsvC,SAEf,KAAK,GAEH,QADEz8C,KAAK8b,IACA3O,EAAMuvC,YAEf,KAAK,GAEH,QADE18C,KAAK8b,IACA3O,EAAMwvC,aAEf,KAAK,GAEH,QADE38C,KAAK8b,IAELy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,GACJ,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA3O,EAAMqV,cAERrV,EAAMoV,MAEf,KAAK,IAEH,QADEviB,KAAK8b,IACA3O,EAAMyvC,UAEf,KAAK,IAEH,KADE58C,KAAK8b,IACHy/B,EAAiB,GAAKv7C,KAAK8b,IAAM3P,EAAK,CACxC,IAAIsvC,EAAM1vC,EAAKM,WAAWrM,KAAK8b,KAC/B,GAAW,KAAP2/B,EAEF,QADEz7C,KAAK8b,IACA3O,EAAM0tC,QAEf,GAAW,IAAPY,EAEF,QADEz7C,KAAK8b,IACA3O,EAAMmV,WAGjB,OAAOnV,EAAMkV,IAEf,KAAK,IAEH,QADEriB,KAAK8b,IACA3O,EAAM0vC,WAEf,KAAK,IAEH,QADE78C,KAAK8b,IACA3O,EAAMoW,MAEf,KAAK,GAEH,QADEvjB,KAAK8b,IACA3O,EAAM2vC,GAEf,QACE,GAAI,EAAAC,kBAAkBr8C,GAAI,CACxB,GAAI,EAAAs8C,mBAAmBt8C,GAAI,CACzB,IAAIu8C,EAAYj9C,KAAK8b,IACrB,OACI9b,KAAK8b,IAAM3P,GACb,EAAA+wC,iBAAiBx8C,EAAIqL,EAAKM,WAAWrM,KAAK8b,OAE1C,IAAK,EAAAkhC,mBAAmBt8C,GAEtB,OADAV,KAAK8b,IAAMmhC,EACJ9vC,EAAMmL,WAGjB,IACI6kC,EAAexE,EADD5sC,EAAKQ,UAAU0wC,EAAWj9C,KAAK8b,MAEjD,GACEqhC,IAAiBhwC,EAAMmU,SACvB+5B,IAAuB3C,EAAmB0E,SAExC/B,IAAuB3C,EAAmB2E,SAC1C7C,EAAsB2C,IAGxB,OAAOA,EAETn9C,KAAK8b,IAAMmhC,EAEb,OAAO9vC,EAAMmL,WACR,GAAI,EAAAglC,aAAa58C,GAAI,GACxBV,KAAK8b,IACP,MAOF,OALA9b,KAAK0oB,MACH,EAAA9d,eAAe2yC,kBACfv9C,KAAKkL,MAAMlL,KAAK8b,IAAK9b,KAAK8b,IAAM,MAEhC9b,KAAK8b,IACA3O,EAAMmU,SAInB,OAAOnU,EAAMqwC,UAGf,KACEC,GAAuB,EACvBpC,EAAyC3C,EAAmBQ,QAC5DwE,EAAyBt6C,IAAIkmC,WAE7B,IAAIv9B,EAAO/L,KAAKyL,OAAOM,KACvB,GAAI/L,KAAKi7C,UAAY,EAAG,CACtB,IAAIgC,EAAYj9C,KAAK8b,IACjB6hC,EAAc39C,KAAKwhB,MACnBo8B,EAAiB59C,KAAKg7C,SAG1B,GAFAh7C,KAAKi7C,UAAYj7C,KAAKs7C,WAAWD,EAAoBqC,GACrD19C,KAAKk7C,aAAel7C,KAAKg7C,SACrByC,EAAgB,CAClBz9C,KAAKm7C,oBAAqB,EAC1B,IAAK,IAAIr/B,EAAMmhC,EAAW9wC,EAAMnM,KAAKk7C,aAAcp/B,EAAM3P,IAAO2P,EAC9D,GAAI,EAAA1P,YAAYL,EAAKM,WAAWyP,IAAO,CACrC9b,KAAKm7C,oBAAqB,EAC1B,OAINn7C,KAAK8b,IAAMmhC,EACXj9C,KAAKwhB,MAAQm8B,EACb39C,KAAKg7C,SAAW4C,EAElB,OAAO59C,KAAKi7C,UAGd,eAAeI,EAAyC3C,EAAmB2E,QACzE,OAAOr9C,KAAK69C,KAAK1wC,EAAMmL,WAAY+iC,GAGrC,KAAK75B,EAAc65B,EAAyC3C,EAAmBQ,SAC7E,IAAI+D,EAAYj9C,KAAK8b,IACjB6hC,EAAc39C,KAAKwhB,MACnBo8B,EAAiB59C,KAAKg7C,SACtB0C,EAAoBt6C,IAAIkmC,UAC5B,OAAQ9nB,GACN,KAAKrU,EAAM8V,YACTy6B,EAAoB,EAKxB,OADA19C,KAAKwhB,MAAQxhB,KAAKs7C,WAAWD,EAAoBqC,GAC7C19C,KAAKwhB,OAASA,GAChBxhB,KAAKi7C,WAAa,GACX,IAEPj7C,KAAK8b,IAAMmhC,EACXj9C,KAAKwhB,MAAQm8B,EACb39C,KAAKg7C,SAAW4C,GACT,GAIX,OACE,IAAIE,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMhiC,IAAM9b,KAAK8b,IACjBgiC,EAAMt8B,MAAQxhB,KAAKwhB,MACnBs8B,EAAM9C,SAAWh7C,KAAKg7C,SACf8C,EAGT,QAAQA,GACNC,EAAgBD,EAGlB,MAAMA,GACJ99C,KAAK8b,IAAMgiC,EAAMhiC,IACjB9b,KAAKwhB,MAAQs8B,EAAMt8B,MACnBxhB,KAAKg7C,SAAW8C,EAAM9C,SACtBh7C,KAAKi7C,WAAa,EAGpB,MAAM/uC,GAAa,EAAIC,GAAW,GAOhC,OANID,EAAQ,GACVA,EAAQlM,KAAKg7C,SACb7uC,EAAMnM,KAAK8b,KACF3P,EAAM,IACfA,EAAMD,GAED,IAAIkB,EAAMpN,KAAKyL,OAAQS,EAAOC,GAGvC,iBAIE,IAHA,IAAIJ,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK8b,IACb3P,EAAMnM,KAAKmM,MAEXnM,KAAK8b,IAAM3P,GACb,EAAA+wC,iBAAiBnxC,EAAKM,WAAWrM,KAAK8b,QAExC,OAAO/P,EAAKQ,UAAUL,EAAOlM,KAAK8b,KAGpC,aAME,IALA,IAAI/P,EAAO/L,KAAKyL,OAAOM,KACnBkyC,EAAQlyC,EAAKM,WAAWrM,KAAK8b,OAC7B5P,EAAQlM,KAAK8b,IACb3P,EAAMnM,KAAKmM,IACXg4B,EAAS,KACA,CACX,GAAInkC,KAAK8b,KAAO3P,EAAK,CACnBg4B,GAAUp4B,EAAKQ,UAAUL,EAAOlM,KAAK8b,KACrC9b,KAAK0oB,MACH,EAAA9d,eAAeszC,4BACfl+C,KAAKkL,MAAMgB,EAAQ,EAAGC,IAExB,MAEF,IAAIzL,EAAIqL,EAAKM,WAAWrM,KAAK8b,KAC7B,GAAIpb,GAAKu9C,EAAO,CACd9Z,GAAUp4B,EAAKQ,UAAUL,EAAOlM,KAAK8b,OACrC,MAEF,GAAS,IAALpb,EAAJ,CAMA,GAAI,EAAA0L,YAAY1L,IAAe,IAATu9C,EAA4B,CAChD9Z,GAAUp4B,EAAKQ,UAAUL,EAAOlM,KAAK8b,KACrC9b,KAAK0oB,MACH,EAAA9d,eAAeszC,4BACfl+C,KAAKkL,MAAMgB,EAAQ,EAAGlM,KAAK8b,MAE7B,QAEA9b,KAAK8b,SAbLqoB,GAAUp4B,EAAKQ,UAAUL,EAAOlM,KAAK8b,KACrCqoB,GAAUnkC,KAAKm+C,qBACfjyC,EAAQlM,KAAK8b,IAajB,OAAOqoB,EAGT,qBACE,IAAIh4B,EAAMnM,KAAKmM,IACf,KAAMnM,KAAK8b,KAAO3P,EAKhB,OAJAnM,KAAK0oB,MACH,EAAA9d,eAAewzC,uBACfp+C,KAAKkL,MAAMiB,IAEN,GAGT,IAAIJ,EAAO/L,KAAKyL,OAAOM,KACnBrL,EAAIqL,EAAKM,WAAWrM,KAAK8b,OAC7B,OAAQpb,GACN,KAAK,GAAa,MAAO,KACzB,KAAK,GAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,GAAsB,MAAO,IAClC,KAAK,GAAsB,MAAO,IAClC,KAAK,IACH,OACEV,KAAK8b,IAAM3P,GACkB,KAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IACA9b,KAAKq+C,6BAEPr+C,KAAKs+C,oBAEd,KAAK,IACH,OAAOt+C,KAAKu+C,wBAEd,KAAK,GAEDv+C,KAAK8b,IAAM3P,GACkB,IAA7BJ,EAAKM,WAAWrM,KAAK8b,QAEnB9b,KAAK8b,IAIX,KAAK,GACL,KAAK,KACL,KAAK,KAA6B,MAAO,GACzC,QAAS,OAAOvU,OAAOi3C,aAAa99C,IAIxC,oBAKE,IAJA,IAAIqL,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK8b,IACb3P,EAAMnM,KAAKmM,IACXsyC,GAAU,IACD,CACX,GAAIz+C,KAAK8b,KAAO3P,EAAK,CACnBnM,KAAK0oB,MACH,EAAA9d,eAAe8zC,wCACf1+C,KAAKkL,MAAMgB,EAAOC,IAEpB,MAEF,GAAiC,IAA7BJ,EAAKM,WAAWrM,KAAK8b,KAA4B,GACjD9b,KAAK8b,IACP2iC,GAAU,EACV,SAEF,IAAI/9C,EAAIqL,EAAKM,WAAWrM,KAAK8b,KAC7B,IAAK2iC,GAAgB,IAAL/9C,EAAqB,MACrC,GAAI,EAAA0L,YAAY1L,GAAI,CAClBV,KAAK0oB,MACH,EAAA9d,eAAe8zC,wCACf1+C,KAAKkL,MAAMgB,EAAOlM,KAAK8b,MAEzB,QAEA9b,KAAK8b,IACP2iC,GAAU,EAEZ,OAAO1yC,EAAKQ,UAAUL,EAAOlM,KAAK8b,KAGpC,kBAKE,IAJA,IAAI/P,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK8b,IACb3P,EAAMnM,KAAKmM,IACXkG,EAAQ,EACLrS,KAAK8b,IAAM3P,GAAK,CACrB,IAAIzL,EAASqL,EAAKM,WAAWrM,KAAK8b,KAClC,IAAK,EAAAohC,iBAAiBx8C,GAAI,MAI1B,SAHEV,KAAK8b,IAGCpb,GACN,KAAK,IACH2R,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFrS,KAAK0oB,MACH,EAAA9d,eAAe+zC,iCACf3+C,KAAKkL,MAAMgB,EAAOlM,KAAK8b,MAGpB/P,EAAKQ,UAAUL,EAAOlM,KAAK8b,KAGpC,cACE,IAAI3P,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KACnB+P,EAAM9b,KAAK8b,IACf,GAAIA,EAAM,EAAI3P,GAA+B,IAAxBJ,EAAKM,WAAWyP,GACnC,OAAmC,GAA3B/P,EAAKM,WAAWyP,EAAM,IAC5B,KAAK,IACL,KAAK,GACL,KAAK,IAAY,OAAO,EAG5B,KAAOA,EAAM3P,GAAK,CAChB,IAAIzL,EAAIqL,EAAKM,WAAWyP,GACxB,GAAS,IAALpb,GAAiC,MAAP,GAAJA,GAAuB,OAAO,EACxD,GAAS,IAALA,IAAoBA,EAAI,IAAeA,EAAI,IAAc,MAE7Dob,IAEF,OAAO,EAGT,cACE,IAAI/P,EAAO/L,KAAKyL,OAAOM,KACvB,GAAI/L,KAAK8b,IAAM,EAAI9b,KAAKmM,KAAoC,IAA7BJ,EAAKM,WAAWrM,KAAK8b,KAAqB,CACvE,OAAwC,GAAhC/P,EAAKM,WAAWrM,KAAK8b,IAAM,IACjC,KAAK,IAEH,OADA9b,KAAK8b,KAAO,EACL9b,KAAK4+C,iBAEd,KAAK,GAEH,OADA5+C,KAAK8b,KAAO,EACL9b,KAAK6+C,oBAEd,KAAK,IAEH,OADA7+C,KAAK8b,KAAO,EACL9b,KAAK8+C,mBAGhB,GAAI,EAAAC,aAAahzC,EAAKM,WAAWrM,KAAK8b,IAAM,IAAK,CAC/C,IAAI5P,EAAQlM,KAAK8b,MACf9b,KAAK8b,IACP,IAAIxa,EAAQtB,KAAK8+C,mBAKjB,OAJA9+C,KAAK0oB,MACH,EAAA9d,eAAeo0C,8CACfh/C,KAAKkL,MAAMgB,EAAOlM,KAAK8b,MAElBxa,GAGX,OAAOtB,KAAKi/C,qBAGd,iBAOE,IANA,IAAIlzC,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK8b,IACbxa,EAAQslB,QAAQ,GAChBs4B,EAAQt4B,QAAQ,GAChBu4B,EAASjzC,EACTC,EAAMnM,KAAKmM,IACRnM,KAAK8b,IAAM3P,GAAK,CACrB,IAAI2P,EAAM9b,KAAK8b,IACXpb,EAAIqL,EAAKM,WAAWyP,GACxB,GAAIpb,GAAK,IAAeA,GAAK,GAE3BY,EAAQ89C,QACNC,QAAQ/9C,EAAO49C,GACft4B,QAAQlmB,EAAI,UAER,GAAIA,GAAK,IAAcA,GAAK,GAElCY,EAAQ89C,QACNC,QAAQ/9C,EAAO49C,GACft4B,QAAQ,GAAKlmB,EAAI,UAEd,GAAIA,GAAK,IAAcA,GAAK,IAEjCY,EAAQ89C,QACNC,QAAQ/9C,EAAO49C,GACft4B,QAAQ,GAAKlmB,EAAI,SAEd,IAAS,IAALA,EAWT,MAVIy+C,GAAUrjC,GACZ9b,KAAK0oB,MACHy2B,GAAUjzC,EACN,EAAAtB,eAAe00C,wCACf,EAAA10C,eAAe20C,0DACnBv/C,KAAKkL,MAAM4Q,IAGfqjC,EAASrjC,EAAM,EAIjB9b,KAAK8b,IAAMA,EAAM,EAanB,OAXI9b,KAAK8b,KAAO5P,EACdlM,KAAK0oB,MACH,EAAA9d,eAAe40C,2BACfx/C,KAAKkL,MAAMgB,IAEJizC,GAAUn/C,KAAK8b,KACxB9b,KAAK0oB,MACH,EAAA9d,eAAe00C,wCACft/C,KAAKkL,MAAMi0C,EAAS,IAGjB79C,EAGT,qBAOE,IANA,IAAIyK,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK8b,IACb3P,EAAMnM,KAAKmM,IACX7K,EAAQslB,QAAQ,GAChB64B,EAAS74B,QAAQ,IACjBu4B,EAASjzC,EACNlM,KAAK8b,IAAM3P,GAAK,CACrB,IAAI2P,EAAM9b,KAAK8b,IACXpb,EAAIqL,EAAKM,WAAWyP,GACxB,GAAIpb,GAAK,IAAeA,GAAK,GAE3BY,EAAQ89C,QACNM,QAAQp+C,EAAOm+C,GACf74B,QAAQlmB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIy+C,GAAUrjC,GACZ9b,KAAK0oB,MACHy2B,GAAUjzC,EACN,EAAAtB,eAAe00C,wCACf,EAAA10C,eAAe20C,0DACnBv/C,KAAKkL,MAAM4Q,IAGfqjC,EAASrjC,EAAM,EAIjB9b,KAAK8b,IAAMA,EAAM,EAanB,OAXI9b,KAAK8b,KAAO5P,EACdlM,KAAK0oB,MACH,EAAA9d,eAAe+0C,eACf3/C,KAAKkL,MAAMgB,IAEJizC,GAAUn/C,KAAK8b,KACxB9b,KAAK0oB,MACH,EAAA9d,eAAe00C,wCACft/C,KAAKkL,MAAMi0C,EAAS,IAGjB79C,EAGT,mBAOE,IANA,IAAIyK,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK8b,IACbxa,EAAQslB,QAAQ,GAChBg5B,EAAQh5B,QAAQ,GAChBu4B,EAASjzC,EACTC,EAAMnM,KAAKmM,IACRnM,KAAK8b,IAAM3P,GAAK,CACrB,IAAI2P,EAAM9b,KAAK8b,IACXpb,EAAIqL,EAAKM,WAAWyP,GACxB,GAAIpb,GAAK,IAAeA,GAAK,GAE3BY,EAAQ89C,QACNC,QAAQ/9C,EAAOs+C,GACfh5B,QAAQlmB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIy+C,GAAUrjC,GACZ9b,KAAK0oB,MACHy2B,GAAUjzC,EACN,EAAAtB,eAAe00C,wCACf,EAAA10C,eAAe20C,0DACnBv/C,KAAKkL,MAAM4Q,IAGfqjC,EAASrjC,EAAM,IAIf9b,KAAK8b,IAaT,OAXI9b,KAAK8b,KAAO5P,EACdlM,KAAK0oB,MACH,EAAA9d,eAAei1C,qBACf7/C,KAAKkL,MAAMgB,IAEJizC,GAAUn/C,KAAK8b,KACxB9b,KAAK0oB,MACH,EAAA9d,eAAe00C,wCACft/C,KAAKkL,MAAMi0C,EAAS,IAGjB79C,EAGT,oBAOE,IANA,IAAIyK,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK8b,IACbxa,EAAQslB,QAAQ,GAChBk5B,EAAQl5B,QAAQ,GAChBu4B,EAASjzC,EACTC,EAAMnM,KAAKmM,IACRnM,KAAK8b,IAAM3P,GAAK,CACrB,IAAI2P,EAAM9b,KAAK8b,IACXpb,EAAIqL,EAAKM,WAAWyP,GACxB,GAAS,IAALpb,EAEFY,EAAQ+9C,QAAQ/9C,EAAOw+C,QAClB,GAAS,IAALp/C,EAETY,EAAQ89C,QACNC,QAAQ/9C,EAAOw+C,GACfA,OAEG,IAAS,IAALp/C,EAWT,MAVIy+C,GAAUrjC,GACZ9b,KAAK0oB,MACHy2B,GAAUjzC,EACN,EAAAtB,eAAe00C,wCACf,EAAA10C,eAAe20C,0DACnBv/C,KAAKkL,MAAM4Q,IAGfqjC,EAASrjC,EAAM,EAIjB9b,KAAK8b,IAAMA,EAAM,EAanB,OAXI9b,KAAK8b,KAAO5P,EACdlM,KAAK0oB,MACH,EAAA9d,eAAem1C,sBACf//C,KAAKkL,MAAMgB,IAEJizC,GAAUn/C,KAAK8b,KACxB9b,KAAK0oB,MACH,EAAA9d,eAAe00C,wCACft/C,KAAKkL,MAAMi0C,EAAS,IAGjB79C,EAGT,YAWE,OAAOtB,KAAKggD,mBAGd,mBAKE,IAHA,IAAI9zC,EAAQlM,KAAK8b,IACb3P,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAChB/L,KAAK8b,IAAM3P,GAAO,EAAAyvC,eAAe7vC,EAAKM,WAAWrM,KAAK8b,SACzD9b,KAAK8b,IAET,GAAI9b,KAAK8b,IAAM3P,GAAoC,IAA7BJ,EAAKM,WAAWrM,KAAK8b,KAEzC,MADE9b,KAAK8b,IACA9b,KAAK8b,IAAM3P,GAAO,EAAAyvC,eAAe7vC,EAAKM,WAAWrM,KAAK8b,SACzD9b,KAAK8b,IAGX,GAAI9b,KAAK8b,IAAM3P,EAAK,CAClB,IAAIzL,EAAIqL,EAAKM,WAAWrM,KAAK8b,KAC7B,GAAgB,MAAP,GAAJpb,GAQH,OANIV,KAAK8b,IAAM3P,GACsB,KAAlCzL,EAAIqL,EAAKM,WAAWrM,KAAK8b,OAAgC,IAALpb,GACrD,EAAAk7C,eAAe7vC,EAAKM,WAAWrM,KAAK8b,IAAM,QAExC9b,KAAK8b,IAEF9b,KAAK8b,IAAM3P,GAAO,EAAAyvC,eAAe7vC,EAAKM,WAAWrM,KAAK8b,SACzD9b,KAAK8b,IAIb,OAAOmkC,WAAWl0C,EAAKQ,UAAUL,EAAOlM,KAAK8b,MAG/C,eACE,MAAM,IAAInT,MAAM,mBAGlB,sBAAsBu3C,EAAc,GAIlC,IAHA,IAAI5+C,EAAQ,EACR6K,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAChB/L,KAAK8b,IAAM3P,GAAK,CACrB,IAAIzL,EAAIqL,EAAKM,WAAWrM,KAAK8b,OAC7B,GAAIpb,GAAK,IAAeA,GAAK,GAC3BY,GAASA,GAAS,GAAKZ,EAAI,QACtB,GAAIA,GAAK,IAAcA,GAAK,GACjCY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAK,IAAcA,GAAK,KAOjC,OAJAV,KAAK0oB,MACH,EAAA9d,eAAe40C,2BACfx/C,KAAKkL,MAAMlL,KAAK8b,IAAM,EAAG9b,KAAK8b,MAEzB,GANPxa,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVw/C,EAAa,MAErB,OAAIA,GACFlgD,KAAK0oB,MACH,EAAA9d,eAAewzC,uBACfp+C,KAAKkL,MAAMlL,KAAK8b,MAEX,IAEFvU,OAAOi3C,aAAal9C,GAG7B,oBACE,OAAOtB,KAAKu+C,sBAAsB,GAG5B,4BACN,IAAIryC,EAAQlM,KAAK8b,IACbxa,EAAQtB,KAAK4+C,iBACbuB,EAAUna,QAAQ1kC,GAClB8+C,GAAU,EAEd91C,QAAQ27B,SAAS3kC,IACb6+C,EAAU,UACZngD,KAAK0oB,MACH,EAAA9d,eAAey1C,4EACfrgD,KAAKkL,MAAMgB,EAAOlM,KAAK8b,MAEzBskC,GAAU,GAGZ,IAAIj0C,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAiBvB,OAhBI/L,KAAK8b,KAAO3P,GACdnM,KAAK0oB,MACH,EAAA9d,eAAewzC,uBACfp+C,KAAKkL,MAAMgB,EAAOC,IAEpBi0C,GAAU,GAC4B,KAA7Br0C,EAAKM,WAAWrM,KAAK8b,OAC5B9b,KAAK8b,KAEP9b,KAAK0oB,MACH,EAAA9d,eAAe01C,qCACftgD,KAAKkL,MAAMgB,EAAOlM,KAAK8b,MAEzBskC,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACb54C,OAAOi3C,aAAa2B,GACpB54C,OAAOi3C,aACL2B,EAAU,QAAa,GAAM,MAC7BA,EAAU,MAAW,KAAQ,OAIrC,WA1lCF,cA+lCA,MAAanC,GAAb,UAUA,IAAID,EAA8B,M,cC5lDlC,IAAIwC,EAGJA,EAAI,WACH,OAAOvgD,KADJ,GAIJ,IAECugD,EAAIA,GAAK,IAAIx6B,SAAS,cAAb,GACR,MAAOy6B,GAEc,iBAAXC,SAAqBF,EAAIE,QAOrC9gD,EAAOD,QAAU6gD,G,8ECdjB,aAKA,OA0BA,OAkCA,OAQA,OAKA,OAKA,OAKA,QAKA,IAAYG,GAAZ,SAAYA,GAEV,uBAEA,yBAJF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAQtB,MAAax7B,UAAiB,EAAAtB,kBAW5B,YAEEyO,GAEA7W,MAAM6W,EAAQ1lB,aAThB,KAAAg0C,sBAA2C,KAE3C,KAAAC,yBAA+C,KAyjFvC,KAAAC,oBAA+B,GAjjFrC7gD,KAAKqyB,QAAUA,EAMjB,YAEEziB,EAEAkxC,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,OAAQrxC,EAAKnC,MACX,KAAK,EAAAJ,SAASmK,UACZ,OAAOxX,KAAKkhD,iBACKtxC,EACfkxC,EACAC,EACAC,GAGJ,KAAK,EAAA3zC,SAASuK,aACZ,OAAO5X,KAAKmhD,oBACQvxC,EAClBkxC,EACAC,EACAC,GAGJ,QAAS12C,QAAO,GAElB,OAAO,KAID,iBAENsF,EAEAkxC,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAI5oC,EAAWzI,EAAKhP,KAChB6W,EAAoB7H,EAAKvB,cACzB+yC,GAAgB/oC,EAASnK,KAG7B,GAAIkzC,EAAc,CAChB,IAAIC,EAAahpC,EAASpK,WAAWlC,KACrC,GAAiB,OAAbg1C,GAAqBA,EAASl0C,IAAIw0C,GAAa,CACjD,IAAI9yC,EAAOwyC,EAAS7/C,IAAImgD,GASxB,GAR0B,OAAtB5pC,GAA8BA,EAAkBxL,QAC9C+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe02C,sBACf1xC,EAAK1E,MAAOqD,EAAK/C,YAInBoE,EAAKtB,WAAY,CACnB,GAAIC,EAAKkf,GAAG,KAAsB,OAAOlf,EAAKgzC,aAC1CP,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe42C,gCACf5xC,EAAK1E,MAAOqD,EAAK/C,YAIvB,OAAO+C,GAKX,IAAI6C,EAAUpR,KAAK2qB,gBAAgBtS,EAAUyoC,EAAYE,GACzD,IAAK5vC,EAAS,OAAO,KAGrB,GAAIA,EAAQkhB,WACVlhB,EAAUA,EAAQkhB,eAEb,CAGL,GAAIlhB,EAAQ3D,MAAQ,EAAA2R,YAAYuU,KAiB9B,OAhB0B,OAAtBlc,GAA8BA,EAAkBxL,QAC9C+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe02C,sBACf1xC,EAAK1E,MAAOkG,EAAQ0T,cAItBlV,EAAKtB,YACH0yC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe42C,gCACf5xC,EAAK1E,MAAOkG,EAAQxQ,KAAO,QAI1B,EAAAulB,KAAK/iB,IAId,GAAIgO,EAAQ3D,MAAQ,EAAA2R,YAAYyK,gBAAiB,CAC/C,IAAIqI,EAAWlyB,KAAKyhD,8BACFrwC,EAChBqG,EACAqpC,EACA,EAAAY,QAAqBX,GACrBnxC,EACAoxC,GAEF,OAAK9uB,EACEtiB,EAAKtB,WAAa4jB,EAAS3jB,KAAKgzC,aAAervB,EAAS3jB,KADzC,MAM1B,GAAI6C,EAAQ3D,MAAQ,EAAA2R,YAAYmU,eAAgB,CAG9C,GAAIniB,EAAQqc,GAAG,EAAAprB,YAAYywB,UAAW,CACV,OAAtBrb,GAA8BA,EAAkBxL,QAC9C+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe02C,sBACf1xC,EAAK1E,MAAOkG,EAAQ0T,cAI1B,IAAIvW,EAAwB6C,EAAS7C,KACrC,GAAIqB,EAAKtB,WAAY,CACnB,GAAKC,EAAKkf,GAAG,KAQX,OAAOlf,EAAKgzC,aAPRP,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe42C,gCACfnpC,EAASnN,MAAOmN,EAASpK,WAAWlC,MAO5C,OAAOwC,EAIT,GAAI6yC,EACF,OAAQ/oC,EAASpK,WAAWlC,MAC1B,KAAK,EAAA/I,YAAY+B,OAAQ,OAAO/E,KAAK2hD,yBAAyB/xC,EAAMkxC,EAAYC,EAAUC,GAC1F,KAAK,EAAAh+C,YAAYgC,QAAS,OAAOhF,KAAK4hD,0BAA0BhyC,EAAMkxC,EAAYC,EAAUC,GAC5F,KAAK,EAAAh+C,YAAYiC,QAAS,OAAOjF,KAAK6hD,0BAA0BjyC,EAAMkxC,EAAYC,EAAUC,GAC5F,KAAK,EAAAh+C,YAAYkC,SAAU,OAAOlF,KAAK8hD,6BAA6BlyC,EAAMkxC,EAAYC,EAAUC,GAKpG,IAAIzpC,EAAsCnG,EAASmG,mBAC/ClJ,EAA+B,KACnC,GAAIkJ,GASF,GARAlJ,EAAgBrO,KAAK+hD,qBACnBxqC,EACAE,EACAqpC,EACAC,EAAW,EAAAW,QAAQX,GACnBnxC,EACAoxC,IAEG3yC,EAAe,OAAO,UAClBoJ,GAAqBA,EAAkBxL,QAChDjM,KAAK0oB,MACH,EAAA9d,eAAe02C,sBACf1xC,EAAK1E,MAAOmN,EAASpK,WAAWlC,MAGpC,IAAIwC,EAAOvO,KAAKgiD,YACG5wC,EAAS6wC,SAC1B7wC,EACA2vC,EACAC,GAEF,IAAKzyC,EAAM,OAAO,KAClB,GAAIqB,EAAKtB,WAAY,CACnB,GAAKC,EAAKkf,GAAG,KAQX,OAAOlf,EAAKgzC,aAPRP,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe42C,gCACfnpC,EAASnN,MAAOmN,EAASpK,WAAWlC,MAO5C,OAAOwC,EAQT,OANIyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAes3C,mBACf7pC,EAASnN,MAAOmN,EAASpK,WAAWlC,MAGjC,KAID,oBAEN6D,EAEAkxC,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAItyC,EAAmBiB,EAAKjB,iBACxBynB,EAAwB,KAC5B,GAAIznB,KACFynB,EAAWp2B,KAAKgiD,YACdrzC,EACAmyC,EACAC,EACAC,IAEa,OAAO,KAExB,IAAInpC,EAAiBjI,EAAKnB,WACtBypC,EAAgBrgC,EAAe5L,OAC/BoqB,EAAiB,IAAI7uB,MAAY0wC,GACjCd,EAAiB,IAAI5vC,MAAc0wC,GACnCb,EAAqB,EACrBC,GAAU,EACd,IAAK,IAAIj3C,EAAI,EAAGA,EAAI63C,IAAiB73C,EAAG,CACtC,IAAI8hD,EAAgBtqC,EAAexX,GACnC,OAAQ8hD,EAAc9yC,eACpB,KAAK,EAAA2I,cAAckhC,QACjB7B,EAAqBh3C,EAAI,EACzB,MAEF,KAAK,EAAA2X,cAAcoqC,KACjB93C,OAAOjK,GAAK63C,GACZZ,GAAU,EAId,IAAI+K,EAAoBF,EAAc5zC,KACtC,GAAI,EAAA+zC,cAAcD,GAOhB,OANIrB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe23C,cACfF,EAAkBn3C,OAGf,KAET,IAAIorB,EAAgBt2B,KAAKgiD,YACvBK,EACAvB,EACAC,EACAC,GAEF,IAAK1qB,EAAe,OAAO,KAC3BD,EAAeh2B,GAAKi2B,EACpB8gB,EAAe/2C,GAAK8hD,EAAcvhD,KAAKmL,KAEzC,IACI2C,EADA8zC,EAAiB5yC,EAAKlB,WAE1B,GAAI,EAAA4zC,cAAcE,GACZxB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe23C,cACfC,EAAet3C,OAGnBwD,EAAa,EAAAyX,KAAKG,UAQlB,KANA5X,EAAa1O,KAAKgiD,YAChBQ,EACA1B,EACAC,EACAC,IAEe,OAAO,KAE1B,IAAIlrC,EAAY,IAAI,EAAAmd,UAAUjzB,KAAKqyB,QAASgE,EAAgB3nB,EAAY0nB,GAIxE,OAHAtgB,EAAUshC,eAAiBA,EAC3BthC,EAAUuhC,mBAAqBA,EAC/BvhC,EAAUwhC,QAAUA,EACb1nC,EAAKtB,WAAawH,EAAUvH,KAAKgzC,aAAezrC,EAAUvH,KAG3D,yBAENqB,EAEAkxC,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIxpC,EAAoB7H,EAAKvB,cAC7B,IAAMoJ,GAAiD,GAA5BA,EAAkBxL,OAO3C,OANI+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe63C,oCACf7yC,EAAK1E,MAAO,KAAMuM,EAAoBA,EAAkBxL,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIk3C,EAAe1iD,KAAKgiD,YAAYvqC,EAAkB,GAAIqpC,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,OAAQA,EAAaj1C,MACnB,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAO,EAAA0Y,KAAK/iB,IAC/B,KAAK,EAAgB,IAAKpD,KAAKqyB,QAAQxO,QAAQgD,SAAU,OAAO,EAAAV,KAAK/iB,IACrE,KAAK,EAAc,OAAO,EAAA+iB,KAAK9iB,IAC/B,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO,EAAA8iB,KAAK1iB,IAChC,KAAK,EAAgB,IAAKzD,KAAKqyB,QAAQxO,QAAQgD,SAAU,OAAO,EAAAV,KAAK1iB,IACrE,KAAK,EAAc,OAAO,EAAA0iB,KAAKziB,IAC/B,KAAK,GAAc,OAAO,EAAAyiB,KAAKtiB,IAC/B,KAAK,GAAc,OAAO,EAAAsiB,KAAKriB,IAC/B,KAAK,GAAe,OAAO,EAAAqiB,KAAKpiB,KAChC,KAAK,GAAe,OAAO,EAAAoiB,KAAKG,KAChC,QAAShc,QAAO,GAElB,OAAO,KAGD,0BAENsF,EAEAkxC,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIxpC,EAAoB7H,EAAKvB,cAC7B,IAAMoJ,GAAiD,GAA5BA,EAAkBxL,OAO3C,OANI+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe63C,oCACf7yC,EAAK1E,MAAO,KAAMuM,EAAoBA,EAAkBxL,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIk3C,EAAe1iD,KAAKgiD,YAAYvqC,EAAkB,GAAIqpC,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAIp1B,EAAiBo1B,EAAap1B,eAClC,IAAKA,EAOH,OANI0zB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+3C,qCACflrC,EAAkB,GAAGvM,MAAOw3C,EAAal3C,YAGtC,KAET,IAAI4tB,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaK,aAC1D,OAAI4Z,EACEA,EAAS3L,GAAG,EAAAprB,YAAYutB,SAC1BtlB,OAAmD,GAA5C8uB,EAAStjB,UAAUugB,eAAepqB,QAClCmtB,EAAStjB,UAAUugB,eAAe,KAEzC/rB,OAAmD,GAA5C8uB,EAAStjB,UAAUugB,eAAepqB,QAClCmtB,EAAStjB,UAAUugB,eAAe,KAGzC2qB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+3C,qCACflrC,EAAkB,GAAGvM,MAAOw3C,EAAal3C,YAGtC,MAGD,0BAENoE,EAEAkxC,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIxpC,EAAoB7H,EAAKvB,cAC7B,IAAMoJ,GAAiD,GAA5BA,EAAkBxL,OAO3C,OANI+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe63C,oCACf7yC,EAAK1E,MAAO,KAAMuM,EAAoBA,EAAkBxL,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIk3C,EAAe1iD,KAAKgiD,YAAYvqC,EAAkB,GAAIqpC,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAIp1B,EAAiBo1B,EAAap1B,eAClC,IAAKA,EAOH,OANI0zB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+3C,qCACflrC,EAAkB,GAAGvM,MAAOw3C,EAAal3C,YAGtC,KAGT,IAAI4tB,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaK,aAC1D,OAAI4Z,EAAiBA,EAAStjB,UAAUpH,YACpCsyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+3C,qCACflrC,EAAkB,GAAGvM,MAAOw3C,EAAal3C,YAGtC,MAGD,6BAENoE,EAEAkxC,EAEAC,EAAoC,KAEpCC,EAAyBN,EAAWO,QAEpC,IAAIxpC,EAAoB7H,EAAKvB,cAC7B,IAAMoJ,GAAiD,GAA5BA,EAAkBxL,OAO3C,OANI+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe63C,oCACf7yC,EAAK1E,MAAO,KAAMuM,EAAoBA,EAAkBxL,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIk3C,EAAe1iD,KAAKgiD,YAAYvqC,EAAkB,GAAIqpC,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAI3M,EAAqB2M,EAAa3M,mBACtC,OAAKA,EASEA,EAAmBrnC,YARpBsyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeg4C,8BACfnrC,EAAkB,GAAGvM,MAAOw3C,EAAal3C,YAGtC,MAMX,gBAEEoE,EAEAkxC,EAEAE,EAAaN,EAAWO,QAExB,IAAI7vC,EAAU0vC,EAAWrtB,OAAO7jB,EAAK3B,WAAWlC,MAChD,IAAKqF,EAOH,OANI4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAes3C,mBACftyC,EAAK1E,MAAO0E,EAAK3B,WAAWlC,MAGzB,KAIT,IAFA,IAAI82C,EAAOjzC,EACP1B,EAAO0B,EAAK1B,KACTA,GAAM,CACX,KAAMkD,EAAUA,EAAQ+X,aAAajb,EAAKD,WAAWlC,OAOnD,OANIi1C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAek4C,oCACf50C,EAAKhD,MAAOgD,EAAKD,WAAWlC,KAAM82C,EAAK50C,WAAWlC,MAG/C,KAET82C,EAAO30C,EACPA,EAAOA,EAAKA,KAEd,OAAOkD,EAIT,qBAEEmC,EAEAkE,EAEAqpC,EAEAC,EAA6B,EAAAW,UAE7BqB,EAAqC,KAErC/B,EAAyBN,EAAWO,QAEpC,IAAI+B,EAAoB,EACpBC,EAAoB,EACxB,IAAK,IAAI5iD,EAAI,EAAGqX,EAAInE,EAAetH,OAAQ5L,EAAIqX,IAAKrX,EAC7CkT,EAAelT,GAAG2O,eAAeg0C,IACpCC,EAEJ,IAAIC,EAAgBzrC,EAAoBA,EAAkBxL,OAAS,EACnE,GAAIi3C,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXAjjD,KAAK0oB,MACH,EAAA9d,eAAe63C,oCACfS,EACI,EAAA91C,MAAMX,KACcgL,EAAmB,GAAGvM,MACtBuM,EAAmByrC,EAAgB,GAAGh4C,OAE1DZ,OAAOy4C,GAAuB73C,OACjCg4C,EAAgBF,EAAoBA,EAAoBC,GAAmBz3C,SAAS,IACrF03C,EAAc13C,SAAS,KAElB,KAET,IAAI6C,EAAgB,IAAI7G,MAAYy7C,GACpC,IAAK,IAAI5iD,EAAI,EAAGA,EAAI4iD,IAAqB5iD,EAAG,CAC1C,IAAIkO,EAAOlO,EAAI6iD,EACXljD,KAAKgiD,YACevqC,EAAmBpX,GACrCygD,EACAC,EACAC,GAEFhhD,KAAKgiD,YACH13C,OAAOiJ,EAAelT,GAAG2O,aACzB8xC,EACAC,EACAC,GAEN,IAAKzyC,EAAM,OAAO,KAElBwyC,EAAS/zC,IAAIuG,EAAelT,GAAGO,KAAKmL,KAAMwC,GAC1CF,EAAchO,GAAKkO,EAErB,OAAOF,EAIT,eACEuB,EACA3N,EACAkhD,EACAnC,EAAyBN,EAAWO,QAEpC,IAAI5yC,EAAgBuB,EAAKvB,cAGzB,GAAIA,EACF,OAAKpM,EAAUwrB,GAAG,EAAAprB,YAAYokB,SASvBzmB,KAAKojD,iCACVnhD,EACAoM,EACA80C,EAAQE,eACR,EAAA3B,QAAQyB,EAAQvuB,yBAChBhlB,EACAoxC,IAdIA,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe02C,sBACf1xC,EAAKU,WAAWpF,MAAOjJ,EAAU6iB,cAG9B,MAaX,GAAI7iB,EAAUwrB,GAAG,EAAAprB,YAAYokB,SAAU,CACrC,IAAImO,EAA0B,EAAA8sB,QAAqByB,EAAQvuB,yBAGvDrd,EAAqBjN,OAAOrI,EAAUsV,oBACtC+rC,EAAoB/rC,EAAmBtL,OACvCs3C,EAAqB,IAAI77C,IAC7B,IAAK,IAAIrH,EAAI,EAAGA,EAAIijD,IAAqBjjD,EAAG,CAC1C,IAAIO,EAAO2W,EAAmBlX,GAAGO,KAAKmL,KACtC6oB,EAAwB5nB,IAAIpM,EAAM,EAAAulB,KAAKkwB,MACvCkN,EAAmBx2C,IAAInM,GAGzB,IAAIiX,EAAiB5V,EAAUuhD,iBAAiB/0C,WAC5CypC,EAAgBrgC,EAAe5L,OAC/Bw3C,EAAgB7zC,EAAKH,UACrB4K,EAAeopC,EAAcx3C,OAGjC,IAAK,IAAI5L,EAAI,EAAGA,EAAI63C,IAAiB73C,EAAG,CACtC,IAAIqjD,EAAqBrjD,EAAIga,EAAeopC,EAAcpjD,GAAKwX,EAAexX,GAAG8O,YACjF,IAAKu0C,EAOH,OANI1C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeimB,+BACfjhB,EAAK1E,MAAOgtC,EAAc1sC,SAAS,IAAK6O,EAAa7O,SAAS,KAG3D,KAET,IAAIy2C,EAAWpqC,EAAexX,GAAGkO,KACjC,GAAI0zC,EAAStqC,oBAAoBJ,GAAqB,CACpD,IAAIhJ,EAAOvO,KAAK2jD,kBAAkBD,EAAoBP,EAAS,EAAAh9B,KAAKkwB,KAAMqK,EAAWkD,SACjFr1C,GAAMvO,KAAK6jD,8BAA8B5B,EAAU1zC,EAAM40C,EAASvuB,EAAyB2uB,IAKnG,IAAIO,EAAwB,IAAIt8C,MAAY87C,GAC5C,IAAK,IAAIjjD,EAAI,EAAGA,EAAIijD,IAAqBjjD,EAAG,CAC1C,IAAIO,EAAO2W,EAAmBlX,GAAGO,KAAKmL,KACtC,GAAI6oB,EAAwB/nB,IAAIjM,GAAO,CACrC,IAAImjD,EAAenvB,EAAwB1zB,IAAIN,GAC/C,GAAImjD,GAAgB,EAAA59B,KAAKkwB,KAAM,CAC7ByN,EAAsBzjD,GAAK0jD,EAC3B,UAWJ,OANI/C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeo5C,uBACfp0C,EAAKU,WAAWpF,MAAM+4C,OAGnB,KAET,OAAOjkD,KAAK2sB,gBACV1qB,EACA6hD,EACA,EAAApC,QAAqByB,EAAQvuB,yBAC7BosB,GAKJ,OAAOhhD,KAAK2sB,gBAAgB1qB,EAAW,KAAM,EAAAy/C,UAAwBV,GAI/D,8BAENpxC,EAEArB,EAEA40C,EAEApC,EAEAwC,GAEA,GAAI3zC,EAAKnC,MAAQ,EAAAJ,SAASmK,UAAW,CACnC,IAAIC,EAAoC7H,EAAMvB,cAC9C,GAA0B,OAAtBoJ,GAA8BA,EAAkBxL,OAAQ,CAC1D,IAAIqhB,EAAiB/e,EAAK+e,eAC1B,GAAIA,EAAgB,CAClB,IAAI8C,EAAiBpwB,KAAK2qB,gBAAgC/a,EAAMhP,KAAMuiD,EAAQE,gBAC9E,IAAKjzB,GAAkBA,EAAe3iB,MAAQ,EAAA2R,YAAYyK,gBAAiB,OAC3E,GAAIyD,EAAerrB,WAA6BmuB,EAAgB,CAC9D,IAAI/hB,EAAgBif,EAAejf,cACnC,GAAsB,OAAlBA,GAA0BA,EAAcpC,QAAUwL,EAAkBxL,OAAQ,CAC9E,IAAK,IAAI5L,EAAI,EAAGqX,EAAIrJ,EAAcpC,OAAQ5L,EAAIqX,IAAKrX,EACjDL,KAAK6jD,8BAA8BpsC,EAAkBpX,GAAIgO,EAAchO,GAAI8iD,EAASpC,EAAUwC,GAEhG,cAID,CACL,IAAI3iD,EAAuBgP,EAAMhP,KAAKqN,WAAWlC,KACjD,GAAIg1C,EAASl0C,IAAIjM,GAAO,CACtB,IAAIsjD,EAAcnD,EAAS7/C,IAAIN,IAC3BsjD,GAAe,EAAA/9B,KAAKkwB,MAASkN,EAAmB12C,IAAIjM,IAASsjD,EAAYpN,eAAevoC,KAC1FwyC,EAAS/zC,IAAIpM,EAAM2N,UAIpB,GAAIqB,EAAKnC,MAAQ,EAAAJ,SAASuK,aAAc,CAC7C,IAAIC,EAAoCjI,EAAMnB,WAC9C,GAAuB,OAAnBoJ,GAA2BA,EAAe5L,OAAQ,CACpD,IAAI8pC,EAAqBxnC,EAAKwnC,mBAC9B,GAAIA,EAAoB,CACtB,IAAI1f,EAAiB0f,EAAmB1f,eACpCD,EAAW2f,EAAmB3f,SAClC,GAAIC,EAAepqB,QAAU4L,EAAe5L,SAAWmqB,IAAgCxmB,EAAMjB,iBAAkB,CAC7G,IAAK,IAAItO,EAAI,EAAGqX,EAAI2e,EAAepqB,OAAQ5L,EAAIqX,IAAKrX,EAClDL,KAAK6jD,8BAA8BhsC,EAAexX,GAAGkO,KAAM8nB,EAAeh2B,GAAI8iD,EAASpC,EAAUwC,GAInG,OAFAvjD,KAAK6jD,8BAAiDj0C,EAAMlB,WAAYqnC,EAAmBrnC,WAAYy0C,EAASpC,EAAUwC,QACtHntB,GAAUp2B,KAAK6jD,8BAAiDj0C,EAAMjB,iBAAmBynB,EAAU+sB,EAASpC,EAAUwC,QASpI,iBAAiBnyC,GACf,IAAI3D,EAAO2D,EAAQ3D,KACnB,GAAIA,GAAQ,EAAA2R,YAAY1G,SACjB1Y,KAAKmkD,yBAAiC/yC,EAASsvC,EAAWkD,SAAU,OAAO,KAElF,GAAI,EAAAQ,eAAe32C,GAAO,CACxB,IAAIc,EAAsB6C,EAAS7C,KACnCjE,OAAOiE,GAAQ,EAAA4X,KAAKG,MACpB,IAAIgH,EAAiB/e,EAAK+e,eAC1B,GAAIA,EAAgB,CAClB,IAAIE,EAAcF,EAAeE,YAC7BA,IAAajf,EAAOif,GAE1B,OAAOjf,EAET,OAAId,GAAQ,EAAA2R,YAAY+X,gBAAyC/lB,EAAS7C,KACnE,KAIT,iBAAiBA,GACf,GAAIA,EAAKkf,GAAG,KAAsB,CAChC,IAAIH,EAAiB/e,EAAK+e,eAC1B,OAAIA,GACqBhjB,OAAOiE,EAAKwnC,oBACXsO,iBAAiBrkD,KAAKqyB,SAC3C,GAAI9jB,GAAQ,EAAA4X,KAAKG,KAAM,CAC5B,IAAIlC,EAAiBpkB,KAAKqyB,QAAQjO,eAElC,OADA9Z,OAAO8Z,EAAevX,IAAI0B,IACnB6V,EAAeljB,IAAIqN,GAE5B,OAAO,KAMT,iBAEEqB,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,KAAOrxC,EAAKnC,MAAQ,EAAAJ,SAASyN,eAC3BlL,EAAiCA,EAAMU,WAEzC,OAAQV,EAAKnC,MACX,KAAK,EAAAJ,SAAS4M,UACZ,OAAOja,KAAKukD,0BACW30C,EACrBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS6M,OACZ,OAAOla,KAAKwkD,uBACQ50C,EAClBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS8M,KACZ,OAAOna,KAAKykD,qBACM70C,EAChBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASkN,MACZ,OAAOva,KAAK0kD,sBACO90C,EACjBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASoN,cACZ,OAAOza,KAAK2kD,8BACe/0C,EACzBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASqN,SACZ,OAAO1a,KAAK4kD,yBACUh1C,EACpBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASiL,WACd,KAAK,EAAAjL,SAASQ,MACd,KAAK,EAAAR,SAASM,KACd,KAAK,EAAAN,SAASO,KACZ,OAAO5N,KAAK6kD,2BACYj1C,EACtBuzC,EAASA,EAAQE,eAAgBrC,GAGrC,KAAK,EAAA3zC,SAAS8N,KACZ,OAAOnb,KAAK8kD,qBACMl1C,EAChBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS6N,MACZ,OAAOlb,KAAK+kD,sBACOn1C,EACjBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASsN,WACZ,OAAO3a,KAAKglD,2BACYp1C,EACtBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASK,QACZ,OAAO1N,KAAKilD,wBACSr1C,EACnBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASuN,IACZ,OAAO5a,KAAKklD,oBACKt1C,EACfuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS4L,eACZ,OAAOjZ,KAAKmlD,+BACgBv1C,EAC1BuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS2N,QACZ,OAAOhb,KAAKolD,wBACSx1C,EACnBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASgO,aACZ,OAAOrb,KAAKqlD,6BACcz1C,EACxBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASiO,YACZ,OAAOtb,KAAKslD,4BACa11C,EACvBuzC,EAASmB,EAAStD,GAUxB,OANIA,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeskB,gBACftf,EAAK1E,OAGF,KAIT,kBAEE0E,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,KAAOrxC,EAAKnC,MAAQ,EAAAJ,SAASyN,eAC3BlL,EAAiCA,EAAMU,WAEzC,OAAQV,EAAKnC,MACX,KAAK,EAAAJ,SAAS4M,UACZ,OAAOja,KAAKulD,2BACW31C,EACrBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS6M,OACZ,OAAOla,KAAKwlD,wBACQ51C,EAClBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS8M,KACZ,OAAOna,KAAKylD,sBACM71C,EAChBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASkN,MACZ,OAAOva,KAAK0lD,uBACO91C,EACjBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASoN,cACZ,OAAOza,KAAK2lD,+BACe/1C,EACzBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASqN,SACZ,OAAO1a,KAAK4lD,0BACUh2C,EACpBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASiL,WACd,KAAK,EAAAjL,SAASQ,MACd,KAAK,EAAAR,SAASM,KACd,KAAK,EAAAN,SAASO,KACZ,OAAO5N,KAAK6lD,4BACYj2C,EACtBuzC,EAASmB,EAASnB,EAAQE,eAAgBrC,GAG9C,KAAK,EAAA3zC,SAAS8N,KACZ,OAAOnb,KAAK8lD,sBACMl2C,EAChBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS6N,MACZ,OAAOlb,KAAK+lD,uBACOn2C,EACjBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASsN,WACZ,OAAO3a,KAAKgmD,4BACYp2C,EACtBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASK,QACZ,OAAO1N,KAAKimD,yBACSr2C,EACnBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASuN,IACZ,OAAO5a,KAAKkmD,qBACKt2C,EACfuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS4L,eACZ,OAAOjZ,KAAKmmD,gCACgBv2C,EAC1BuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAAS2N,QACZ,OAAOhb,KAAKomD,yBACSx2C,EACnBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASgO,aACZ,OAAOrb,KAAKqmD,8BACcz2C,EACxBuzC,EAASmB,EAAStD,GAGtB,KAAK,EAAA3zC,SAASiO,YACZ,OAAOtb,KAAKsmD,6BACa12C,EACvBuzC,EAASmB,EAAStD,GAUxB,OANIA,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeskB,gBACftf,EAAK1E,OAGF,KAIT,2BAEE0E,EAEAuzC,EAEArC,EAAsBqC,EAAQE,eAE9BrC,EAAyBN,EAAWO,QAEpC,OAAQrxC,EAAKnC,MACX,KAAK,EAAAJ,SAASO,KACd,KAAK,EAAAP,SAASQ,MACd,KAAK,EAAAR,SAASM,KAAM,CAClB,IAAIY,EAAOvO,KAAK6lD,4BAA4Bj2C,EAAMuzC,EAAS,EAAAh9B,KAAKkwB,KAAMyK,EAAYE,GAClF,OAAOzyC,EAAOvO,KAAKumD,iBAAiBh4C,GAAQ,MAGhD,IACI6C,EADAxQ,EAAOgP,EAAK7D,KAEhB,OAAIqF,EAAU+xC,EAAQ1vB,OAAO7yB,KAC3BZ,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzBxvC,IAELA,EAAU0vC,EAAWrtB,OAAO7yB,KAC9BZ,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzBxvC,IAELA,EAAUpR,KAAKqyB,QAAQhJ,aAAazoB,KACtCZ,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzBxvC,IAEL4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAes3C,mBACftyC,EAAK1E,MAAOtK,GAGT,MAID,4BAENgP,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErByK,EAAsBqC,EAAQE,eAE9BrC,EAAyBN,EAAWO,QAEpC,OAAQrxC,EAAKnC,MACX,KAAK,EAAAJ,SAASO,KACd,KAAK,EAAAP,SAASQ,MAAO,OAAO,EAAAsY,KAAKviB,KACjC,KAAK,EAAAyJ,SAASM,KAAM,CAClB,IAAI2f,EAAiBg3B,EAAQh3B,eAC7B,OAAOg3B,EAAQ72B,GAAG,MAA2C,OAAnBH,EACtCA,EAAe/e,KAAKgzC,aACpBvhD,KAAKqyB,QAAQxO,QAAQwC,WAG7B,IAAIjV,EAAUpR,KAAK6kD,2BAA2Bj1C,EAAMuzC,EAASrC,EAAYE,GACzE,IAAK5vC,EAAS,OAAO,KACrB,GAAIA,EAAQ3D,MAAQ,EAAA2R,YAAYsN,mBAAoB,CAClD,IAAIwF,EAAWlyB,KAAK2sB,gBAAmCvb,EAAS,KAAM,EAAAswC,UAAWV,GACjF,IAAK9uB,EAAU,OAAO,KACtB9gB,EAAU8gB,EAEZ,IAAI3jB,EAAOvO,KAAKwmD,iBAAiBp1C,GASjC,OARK7C,GACCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe67C,2CACf72C,EAAK1E,OAIJqD,EAID,yBAAyBmf,EAAgBszB,EAAyBN,EAAWO,QACnF,GAAIvzB,EAAOD,GAAG,EAAAprB,YAAYywB,UAAW,OAAO,EAC5C,IAAIvkB,EACA0zC,EAAWv0B,EAAOu0B,SAMtB,SAJE1zC,EADE0zC,EACKjiD,KAAKgiD,YAAYC,EAAUv0B,EAAOhS,OAAQ,KAAMslC,GAEhDhhD,KAAK2jD,kBAAkBr5C,OAAOojB,EAAOg5B,iBAAkBh5B,EAAOjG,KAAKsL,cAAc0D,KAAM,EAAAtQ,KAAKkwB,KAAM2K,MAG3GtzB,EAAON,QAAQ7e,IACR,GAID,+BAENqB,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI0F,EAAa/2C,EAAKU,WAClB2oB,EAASj5B,KAAK4mD,iBAAiBD,EAAYxD,EAASmB,EAAStD,GACjE,IAAK/nB,EAAQ,OAAO,KACpB,IAAI4tB,EAAej3C,EAAK5N,SAAS+J,KAGjC,OAAQktB,EAAOxrB,MACb,KAAK,EAAA2R,YAAY1G,OAAQ,IAAK1Y,KAAKmkD,yBAAiClrB,EAAQ+nB,GAAa,OAAO,KAChG,KAAK,EAAA5hC,YAAY8U,UACjB,KAAK,EAAA9U,YAAYkV,MACjB,KAAK,EAAAlV,YAAY+N,MAAO,CACtB,IAAI5e,EAA6B0qB,EAAQ1qB,KAAMjE,OAAOiE,GAAQ,EAAA4X,KAAKG,MACnE,IAAIgH,EAAiB/e,EAAK+e,eAC1B,IAAKA,EAAgB,CACnB,IAAIlJ,EAAiBpkB,KAAKqyB,QAAQjO,eAClC,IAAIA,EAAevX,IAAI0B,GASrB,OANIyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAek4C,oCACflzC,EAAK5N,SAASkJ,MAAO27C,EAAoC5tB,EAAQ1qB,KAAK/C,YAGnE,KARP8hB,EAAiBlJ,EAAeljB,IAAIqN,GAWxC0qB,EAAS3L,EACT,MAEF,KAAK,EAAAlO,YAAY2N,mBAAoB,CACnC,IAAI0K,EAAiBz3B,KAAK2sB,gBACxBriB,OAA2B2uB,EAAQjM,iBACnC,KACA,EAAA00B,UACAV,GAEF,IAAKvpB,EAAgB,OAAO,KAC5B,IAAIlpB,EAAOkpB,EAAe3hB,UAAUpH,WAChC4e,EAAiB/e,EAAK+e,eAC1B,IAAKA,EAAgB,CACnB,IAAIlJ,EAAiBpkB,KAAKqyB,QAAQjO,eAClC,IAAIA,EAAevX,IAAI0B,GASrB,OANIyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAek4C,oCACflzC,EAAK5N,SAASkJ,MAAO27C,EAAct4C,EAAK/C,YAGrC,KARP8hB,EAAiBlJ,EAAeljB,IAAIqN,GAWxC0qB,EAAS3L,EACT,MAEF,KAAK,EAAAlO,YAAY8N,SAAU,CACzB,IACI3e,EADiBjE,OAAkB2uB,EAAQxB,gBACrB3hB,UAAUpH,WAChC4e,EAAiB/e,EAAK+e,eAC1B,IAAKA,EAAgB,CACnB,IAAIlJ,EAAiBpkB,KAAKqyB,QAAQjO,eAClC,IAAIA,EAAevX,IAAI0B,GASrB,OANIyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAek4C,oCACflzC,EAAK5N,SAASkJ,MAAO27C,EAAct4C,EAAK/C,YAGrC,KARP8hB,EAAiBlJ,EAAeljB,IAAIqN,GAWxC0qB,EAAS3L,EACT,MAEF,KAAK,EAAAlO,YAAYuY,eAAgB,CAC/B,IAAIrmB,EAAoBhH,OAAOtK,KAAK4gD,0BAChCllC,EAA0Bud,EAAQvd,OACtCpR,OAAOoR,EAAOjO,MAAQ,EAAA2R,YAAY9E,OAClC,IAAIwsC,EAAqBprC,EAAQmc,eAAe,EAAA1Y,aAAaK,aAC7D,IAAKsnC,EAOH,OANI9F,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+3C,qCACfrxC,EAAkBpG,MAAOwQ,EAAOoJ,cAG7B,KAET,IAAIpW,EAAao4C,EAAWhxC,UAAUpH,WAClC4e,EAAiB5e,EAAW4e,eAChC,IAAKA,EAAgB,CACnB,IAAIlJ,EAAiBpkB,KAAKqyB,QAAQjO,eAClC,IAAIA,EAAevX,IAAI6B,GASrB,OANIsyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAek4C,oCACflzC,EAAK5N,SAASkJ,MAAO27C,EAAcn4C,EAAWlD,YAG3C,KARP8hB,EAAiBlJ,EAAeljB,IAAIwN,GAWxCuqB,EAAS3L,EACT,MAEF,KAAK,EAAAlO,YAAYsN,mBAAoB,CACnC,IAAI4F,EAAa2G,EAAO3G,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAW7E,GAAG,EAAAprB,YAAYywB,UAAW,CACxC,IAAIi0B,EAAe/mD,KAAKgiD,YAAY1vB,EAAW2vB,SAAU3vB,EAAW5W,OAAQ,KAAMslC,GAC9E+F,GAAcz0B,EAAWlF,QAAQ25B,GAEvC,IAAIz5B,EAAiBgF,EAAW/jB,KAAK+e,eACjCA,IAAgB2L,EAAS3L,EAAerrB,WAC5C,QAMN,OAAQg3B,EAAOxrB,MACb,KAAK,EAAA2R,YAAYyK,gBACjB,KAAK,EAAAzK,YAAY9E,MACf,OAAG,CACD,IAAI7G,EAAUwlB,EAAOxlB,QACrB,GAAIA,GAAWA,EAAQ5G,IAAIg6C,GAGzB,OAFA7mD,KAAK2gD,sBAAwBgG,EAC7B3mD,KAAK4gD,yBAA2B,KACzBntC,EAAQvS,IAAI2lD,GAGrB,GAAI5tB,EAAOxrB,MAAQ,EAAA2R,YAAYyK,gBAAiB,CAC9C,IAAqBoP,EAAQrO,cAG3B,MAFAqO,EAA0CA,EAAQrO,kBAK/C,IAAIqO,EAAOxrB,MAAQ,EAAA2R,YAAY9E,MAOpC,MANA,IAAY2e,EAAQJ,KAGlB,MAFAI,EAAwBA,EAAQJ,MAQtC,MAEF,QAAS,CACP,IAAIplB,EAAUwlB,EAAOxlB,QACrB,GAAIA,GAAWA,EAAQ5G,IAAIg6C,GAGzB,OAFA7mD,KAAK2gD,sBAAwBgG,EAC7B3mD,KAAK4gD,yBAA2B,KACzBntC,EAAQvS,IAAI2lD,GAErB,OAUJ,OANI7F,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAek4C,oCACflzC,EAAK5N,SAASkJ,MAAO27C,EAAc5tB,EAAOnU,cAGvC,KAID,gCAENlV,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI7vC,EAAUpR,KAAKmlD,+BAA+Bv1C,EAAMuzC,EAASmB,EAAStD,GAC1E,IAAK5vC,EAAS,OAAO,KACrB,IAAI7C,EAAOvO,KAAKwmD,iBAAiBp1C,GASjC,OARK7C,GACCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe67C,2CACf72C,EAAK1E,OAIJqD,EAID,8BAENqB,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI+F,EAAmBp3C,EAAKU,WACxBimC,EAAav2C,KAAK2jD,kBAAkBqD,EAAkB7D,EAASmB,EAAStD,GAC5E,IAAKzK,EAAY,OAAO,KACxB,GAAIA,EAAW9oB,GAAG,KAAsB,CACtC,IAAIH,EAAiBipB,EAAWjpB,eAChC,GAAIA,EAAgB,CAClB,IAAIgL,EAAiBhL,EAAegL,eACpC,GAAIA,EAGF,OAFAt4B,KAAK2gD,sBAAwBqG,EAC7BhnD,KAAK4gD,yBAA2BhxC,EAAK0B,kBAC9BgnB,GAUb,OANI0oB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+3C,qCACfqE,EAAiB97C,MAAOqrC,EAAW/qC,YAGhC,KAID,+BAENoE,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI7vC,EAAUpR,KAAK2kD,8BAA8B/0C,EAAMuzC,EAASmB,EAAStD,GACzE,IAAK5vC,EAAS,OAAO,KACrB,IAAI7C,EAAOvO,KAAKwmD,iBAAiBp1C,GASjC,OARK7C,GACCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe67C,2CACf72C,EAAK1E,OAIJqD,EAIT,4BAEE04C,EAEA3C,GAEA,IAAKA,EAAQ72B,GAAG,KAEd,OAAQ62B,EAAQ72C,MACd,KAAK,EACH,GAAIy5C,UAAUD,GAAW,OAAO,EAAA9gC,KAAKjjB,GACrC,MAEF,KAAK,EACH,GAAIikD,UAAUF,GAAW,OAAO,EAAA9gC,KAAK5iB,GACrC,MAEF,KAAK,EACH,GAAI6jD,WAAWH,GAAW,OAAO,EAAA9gC,KAAKhjB,IACtC,MAEF,KAAK,EACH,GAAIkkD,WAAWJ,GAAW,OAAO,EAAA9gC,KAAK3iB,IACtC,MAEF,KAAK,EACH,GAAI8jD,WAAWL,GAAW,OAAO,EAAA9gC,KAAK/iB,IACtC,MAEF,KAAK,EACH,GAAImkD,WAAWN,GAAW,OAAO,EAAA9gC,KAAK1iB,IACtC,MAEF,KAAK,GACH,GAAI+jD,YAAYP,GAAW,OAAO,EAAA9gC,KAAKviB,KACvC,MAEF,KAAK,EACH,IAAK5D,KAAKqyB,QAAQxO,QAAQgD,SAAU,CAClC,GAAIygC,WAAWL,GAAW,OAAO,EAAA9gC,KAAK+vB,QACtC,MAEF,OAAO,EAAA/vB,KAAK8vB,QAEd,KAAK,EACH,IAAKj2C,KAAKqyB,QAAQxO,QAAQgD,SAAU,CAClC,GAAI0gC,WAAWN,GAAW,OAAO,EAAA9gC,KAAKiwB,QACtC,MAEF,OAAO,EAAAjwB,KAAKgwB,QAEd,KAAK,EAAc,OAAO,EAAAhwB,KAAK9iB,IAC/B,KAAK,EAAc,OAAO,EAAA8iB,KAAKziB,IAC/B,KAAK,GAAc,OAAO,EAAAyiB,KAAKtiB,IAC/B,KAAK,GAAc,OAAO,EAAAsiB,KAAKriB,IAInC,OAAIwjD,WAAWL,GAAkB,EAAA9gC,KAAK/iB,IAClCmkD,WAAWN,GAAkB,EAAA9gC,KAAK1iB,IAC/B,EAAA0iB,KAAK9iB,IAIN,0BAENuM,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,GAAIrxC,EAAKS,eAAiB,EAAA2J,cAAcytC,QACtC,OAAOznD,KAAK4mD,iBAAiBh3C,EAAKU,WAAY6yC,EAASmB,EAAStD,GAElE,IAAIzyC,EAAOvO,KAAKgiD,YACd13C,OAAOsF,EAAKW,QACZ4yC,EAAQE,eACRF,EAAQvuB,wBACRosB,GAEF,IAAKzyC,EAAM,OAAO,KAClB,IAAI6C,EAAUpR,KAAKumD,iBAAiBh4C,GACpC,OAAI6C,IACA4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe88C,kCACf93C,EAAK1E,MAAOqD,EAAK/C,YAGrBxL,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzB,MAID,2BAENhxC,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,GAAIrxC,EAAKS,eAAiB,EAAA2J,cAAcytC,QAAS,CAC/C,IAAIl5C,EAAOvO,KAAK2jD,kBAAkB/zC,EAAKU,WAAY6yC,EAASmB,EAAStD,GACrE,OAAOzyC,EAAOA,EAAKynC,gBAAkB,KAEvC,OAAOh2C,KAAKgiD,YACV13C,OAAOsF,EAAKW,QACZ4yC,EAAQE,eACRF,EAAQvuB,wBACRosB,GAKI,4BAENpxC,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAI1yC,EAAOvO,KAAKsmD,6BAA6B12C,EAAMuzC,EAASmB,EAAStD,GACrE,IAAKzyC,EAAM,OAAO,KAClB,IAAI6C,EAAUpR,KAAKumD,iBAAiBh4C,GASpC,OARK6C,GACC4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+8C,2CACf/3C,EAAK1E,MAAO,EAAA08C,sBAAsBh4C,EAAKa,UAAWlC,EAAK/C,YAItD4F,EAID,6BAENxB,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAIjuC,EAAUpD,EAAKoD,QACfvC,EAAWb,EAAKa,SACpB,OAAQA,GACN,KAAK,EAAAtD,MAAM6T,MAET,GAAIhO,EAAQvF,MAAQ,EAAAJ,SAASK,SAA+BsF,EAAS2G,aAAe,EAAApM,YAAYsM,QAC9F,OAAO7Z,KAAK6nD,4BAA4BC,QAAQC,SAAqC/0C,EAAS1R,OAAQgjD,GAI1G,KAAK,EAAAn3C,MAAM2T,KACX,KAAK,EAAA3T,MAAMqW,UACX,KAAK,EAAArW,MAAMsW,YAAa,CACtB,IAAIlV,EAAOvO,KAAK2jD,kBAAkB3wC,EAASmwC,EAASmB,EAAStD,GAC7D,IAAKzyC,EAAM,OAAO,KAClB,GAAIA,EAAKkf,GAAG,KAAsB,CAChC,IAAIH,EAAiB/e,EAAK+e,eAC1B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAakE,qBAAqB5S,IAC/E,GAAI2oB,EAAU,OAAOA,EAAStjB,UAAUpH,WACxC,IAAI8e,EAAcF,EAAeE,YAC7BA,IAAajf,EAAOif,IAG5B,OAAKjf,EAAK+gB,MAAM,KAAwC/gB,EAAKkf,GAAG,MAC1DuzB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+8C,2CACf/3C,EAAK1E,MAAO,EAAA08C,sBAAsBn3C,GAAWlC,EAAK/C,YAG/C,MAEF+C,EAET,KAAK,EAAApB,MAAMmW,YAAa,CACtB,IAAI/U,EAAOvO,KAAK2jD,kBAAkB3wC,EAASmwC,EAASmB,EAAStD,GAC7D,IAAKzyC,EAAM,OAAO,KAClB,GAAIA,EAAKkf,GAAG,KAAsB,CAChC,IAAIH,EAAiB/e,EAAK+e,eAC1B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAa+B,KAC1D,GAAIkY,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,OAAO,EAAAyX,KAAKviB,KAEd,KAAK,EAAAuJ,MAAMoW,MAAO,CAChB,IAAIhV,EAAOvO,KAAK2jD,kBAAkB3wC,EAASmwC,EAASmB,EAAStD,GAC7D,IAAKzyC,EAAM,OAAO,KAClB,GAAIA,EAAKkf,GAAG,KAAsB,CAChC,IAAIH,EAAiB/e,EAAK+e,eAC1B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAagC,aAC1D,GAAIiY,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,OAAKH,EAAK+gB,MAAM,KAAyC/gB,EAAKkf,GAAG,KAS1Dlf,EAAKy5C,SARNhH,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+8C,2CACf/3C,EAAK1E,MAAO,IAAKqD,EAAK/C,YAGnB,MAIX,QAASlB,QAAO,GAElB,OAAO,KAID,6BAENsF,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAI1yC,EAAOvO,KAAKqmD,8BAA8Bz2C,EAAMuzC,EAASmB,EAAStD,GACtE,IAAKzyC,EAAM,OAAO,KAClB,IAAI6C,EAAUpR,KAAKumD,iBAAiBh4C,GASpC,OARK6C,GACC4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+8C,2CACf/3C,EAAK1E,MAAO,EAAA08C,sBAAsBh4C,EAAKa,UAAWlC,EAAK/C,YAItD4F,EAID,8BAENxB,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAIxwC,EAAWb,EAAKa,SACpB,OAAQA,GACN,KAAK,EAAAtD,MAAMqW,UACX,KAAK,EAAArW,MAAMsW,YAAa,CACtB,IAAIlV,EAAOvO,KAAK2jD,kBAAkB/zC,EAAKoD,QAASmwC,EAASmB,EAAStD,GAClE,IAAKzyC,EAAM,OAAO,KAClB,GAAIA,EAAKkf,GAAG,KAAsB,CAChC,IAAIH,EAAiB/e,EAAK+e,eAC1B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAauE,sBAAsBjT,IAChF,GAAI2oB,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,OAAKH,EAAK+gB,MAAM,KAAyC/gB,EAAKkf,GAAG,KAS1Dlf,GARDyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+8C,2CACf/3C,EAAK1E,MAAO,EAAA08C,sBAAsBn3C,GAAWlC,EAAK/C,YAG/C,OAWb,OANIw1C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeskB,gBACftf,EAAK1E,OAGF,KAID,uBAEN0E,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAI1yC,EAAOvO,KAAKwlD,wBAAwB51C,EAAMuzC,EAASmB,EAAStD,GAChE,IAAKzyC,EAAM,OAAO,KAClB,IAAI6C,EAAUpR,KAAKumD,iBAAiBh4C,GACpC,OAAI6C,IACA4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe88C,kCACf93C,EAAK1E,MAAOqD,EAAK/C,YAGd,MAID,wBAENoE,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAIvwC,EAAOd,EAAKc,KACZC,EAAQf,EAAKe,MACbF,EAAWb,EAAKa,SAEpB,OAAQA,GAIN,KAAK,EAAAtD,MAAM2tC,OACX,KAAK,EAAA3tC,MAAMsU,YACX,KAAK,EAAAtU,MAAMuU,aACX,KAAK,EAAAvU,MAAMyU,gBACX,KAAK,EAAAzU,MAAM+U,yBACX,KAAK,EAAA/U,MAAM2U,aACX,KAAK,EAAA3U,MAAM6U,eACX,KAAK,EAAA7U,MAAMuV,yBACX,KAAK,EAAAvV,MAAMyV,+BACX,KAAK,EAAAzV,MAAM2V,2CACX,KAAK,EAAA3V,MAAMiV,iBACX,KAAK,EAAAjV,MAAMmV,WACX,KAAK,EAAAnV,MAAMqV,aACT,OAAOxiB,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAKxD,KAAK,EAAA7zC,MAAMgW,SACX,KAAK,EAAAhW,MAAM8V,YACX,KAAK,EAAA9V,MAAMiW,gBACX,KAAK,EAAAjW,MAAM+V,mBAAoB,CAC7B,IAAI+kC,EAAWjoD,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAC9D,IAAKiH,EAAU,OAAO,KACtB,GAAIA,EAASx6B,GAAG,KAAsB,CACpC,IAAIH,EAAiB26B,EAAS36B,eAC9B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaoC,gBAAgB9Q,IAC1E,GAAI2oB,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,OAAKu5C,EAAS34B,MAAM,KAAwC24B,EAASx6B,GAAG,MAClEuzB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+8C,2CACf/3C,EAAK1E,MAAO,EAAA08C,sBAAsBn3C,GAAWw3C,EAASz8C,YAGnD,MAEF,EAAA2a,KAAKviB,KAKd,KAAK,EAAAuJ,MAAM4V,cACX,KAAK,EAAA5V,MAAM6V,mBAAoB,CAC7B,IAAIilC,EAAWjoD,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAC9D,IAAKiH,EAAU,OAAO,KACtB,GAAIA,EAASx6B,GAAG,KAAsB,CACpC,IAAIH,EAAiB26B,EAAS36B,eAC9B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaoC,gBAAgB9Q,IAC1E,GAAI2oB,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,OAAO,EAAAyX,KAAKviB,KAKd,KAAK,EAAAuJ,MAAMutC,qBACX,KAAK,EAAAvtC,MAAMwtC,0BACT,OAAO,EAAAx0B,KAAKviB,KAKd,KAAK,EAAAuJ,MAAM2T,KACX,KAAK,EAAA3T,MAAM6T,MACX,KAAK,EAAA7T,MAAMwU,SACX,KAAK,EAAAxU,MAAM0U,MACX,KAAK,EAAA1U,MAAM4U,QAAS,CAClB,IAAIkmC,EAAWjoD,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAC9D,IAAKiH,EAAU,OAAO,KACtB,GAAIA,EAASx6B,GAAG,KAAsB,CACpC,IAAIH,EAAiB26B,EAAS36B,eAC9B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaoC,gBAAgB9Q,IAC1E,GAAI2oB,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,IAAIw5C,EAAYloD,KAAK2jD,kBAAkBhzC,EAAOwyC,EAAS8E,EAAUjH,GACjE,IAAKkH,EAAW,OAAO,KACvB,IAAIC,EAAa,EAAAhiC,KAAKiiC,kBAAkBH,EAAUC,GAAW,GAS7D,OARKC,GACCnH,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAey9C,8CACfz4C,EAAK1E,MAAO+8C,EAASz8C,WAAY08C,EAAU18C,YAI1C28C,EAKT,KAAK,EAAAh7C,MAAM8U,kBAAmB,CAC5B,IAAIgmC,EAAWjoD,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAC9D,IAAKiH,EAAU,OAAO,KACtB,GAAIA,EAASx6B,GAAG,KAAsB,CACpC,IAAIH,EAAiB26B,EAAS36B,eAC9B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaY,KAC1D,GAAIqZ,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,OAAOu5C,GAAY,EAAA9hC,KAAKtiB,IAAM,EAAAsiB,KAAKtiB,IAAM,EAAAsiB,KAAKriB,IAKhD,KAAK,EAAAqJ,MAAMsV,kBACX,KAAK,EAAAtV,MAAMwV,wBACX,KAAK,EAAAxV,MAAM0V,oCAAqC,CAC9C,IAAIolC,EAAWjoD,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAC9D,IAAKiH,EAAU,OAAO,KACtB,GAAIA,EAASx6B,GAAG,KAAsB,CACpC,IAAIH,EAAiB26B,EAAS36B,eAC9B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaoC,gBAAgB9Q,IAC1E,GAAI2oB,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,OAAKu5C,EAASx6B,GAAG,IAAsBw6B,EAASx6B,GAAG,MAC7CuzB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+8C,2CACf/3C,EAAK1E,MAAO,EAAA08C,sBAAsBn3C,GAAWw3C,EAASz8C,YAGnD,MAEFy8C,EAKT,KAAK,EAAA96C,MAAMgV,UACX,KAAK,EAAAhV,MAAMkV,IACX,KAAK,EAAAlV,MAAMoV,MAAO,CAChB,IAAI0lC,EAAWjoD,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAC9D,IAAKiH,EAAU,OAAO,KACtB,GAAIA,EAASx6B,GAAG,KAAsB,CACpC,IAAIH,EAAiB26B,EAAS36B,eAC9B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeuK,eAAe,EAAA1Y,aAAaoC,gBAAgB9Q,IAC1E,GAAI2oB,EAAU,OAAOA,EAAStjB,UAAUpH,YAG5C,IAAIw5C,EAAYloD,KAAK2jD,kBAAkBhzC,EAAOwyC,EAASmB,EAAStD,GAChE,IAAKkH,EAAW,OAAO,KACvB,IAAIC,EAAa,EAAAhiC,KAAKiiC,kBAAkBH,EAAUC,GAAW,GAS7D,OARKC,GAAeA,EAAW16B,GAAG,KAAsB06B,EAAW16B,GAAG,MAChEuzB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAey9C,8CACfz4C,EAAK1E,MAAO,EAAA08C,sBAAsBn3C,GAAWw3C,EAASz8C,WAAY08C,EAAU18C,YAI3E28C,EAKT,KAAK,EAAAh7C,MAAMytC,oBACX,KAAK,EAAAztC,MAAM0tC,QACT,OAAO76C,KAAK2jD,kBAAkBjzC,EAAMyyC,EAASmB,EAAStD,GAS1D,OANIA,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeskB,gBACftf,EAAK1E,OAGF,KAID,qBAEN0E,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,GAAIkC,EAAQmF,SAAU,CACpB,IAAIC,EAAYpF,EAAQqF,YAAY,EAAAxlD,YAAYsC,OAChD,GAAIijD,EAGF,OAFAvoD,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzB2H,EAGX,IAAI7sC,EAASynC,EAAQE,eAAe3nC,OACpC,OAAIA,GACF1b,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzBllC,IAELslC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe69C,+CACf74C,EAAK1E,OAGF,MAID,sBAEN0E,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAI7vC,EAAUpR,KAAK8kD,qBAAqBl1C,EAAMuzC,EAASmB,EAAStD,GAChE,IAAK5vC,EAAS,OAAO,KACrB,IAAI7C,EAAOvO,KAAKwmD,iBAAiBp1C,GASjC,OARK7C,GACCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe67C,2CACf72C,EAAK1E,OAIJqD,EAID,sBAENqB,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,GAAIkC,EAAQmF,SAAU,CACpB,IAAII,EAAavF,EAAQqF,YAAY,EAAAxlD,YAAYuC,QACjD,GAAImjD,EAGF,OAFA1oD,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzB8H,EAGX,IAAIhtC,EAAyBynC,EAAQE,eAAe3nC,OACpD,OAAIA,GAAUA,EAAOjO,MAAQ,EAAA2R,YAAY9E,QAAUoB,EAAiBA,EAAQmd,OAC1E74B,KAAK2gD,sBAAwB,KAC7B3gD,KAAK4gD,yBAA2B,KACzBllC,IAELslC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe+9C,iDACf/4C,EAAK1E,OAGF,MAID,uBAEN0E,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAI7vC,EAAUpR,KAAK+kD,sBAAsBn1C,EAAMuzC,EAASmB,EAAStD,GACjE,IAAK5vC,EAAS,OAAO,KACrB,IAAI7C,EAAOvO,KAAKwmD,iBAAiBp1C,GASjC,OARK7C,GACCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe67C,2CACf72C,EAAK1E,OAIJqD,EAID,wBAENqB,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,OAAQrxC,EAAK+J,aACX,KAAK,EAAApM,YAAYsM,QAAS,CACxB7Z,KAAK2gD,sBAAwB/wC,EAC7B5P,KAAK4gD,yBAA2B,KAChC,IAAIoH,EAAUhoD,KAAK6nD,4BACUj4C,EAAMtO,MACjCgjD,GAEElgC,EAAiBpkB,KAAKqyB,QAAQjO,eAElC,OADA9Z,OAAO8Z,EAAevX,IAAIm7C,IACnB5jC,EAAeljB,IAAI8mD,GAE5B,KAAK,EAAAz6C,YAAYqM,MAAO,CACtB5Z,KAAK2gD,sBAAwB/wC,EAC7B5P,KAAK4gD,yBAA2B,KAChC,IAAIgI,EAAUtE,GAAW,EAAAn+B,KAAKtiB,IAAM,EAAAsiB,KAAKtiB,IAAM,EAAAsiB,KAAKriB,IAChDsgB,EAAiBpkB,KAAKqyB,QAAQjO,eAElC,OADA9Z,OAAO8Z,EAAevX,IAAI+7C,IACnBxkC,EAAeljB,IAAI0nD,GAE5B,KAAK,EAAAr7C,YAAY0N,OAGf,OAFAjb,KAAK2gD,sBAAwB/wC,EAC7B5P,KAAK4gD,yBAA2B,KACzB5gD,KAAKqyB,QAAQ5I,eAWxB,OANIu3B,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAeskB,gBACftf,EAAK1E,OAGF,KAID,yBAEN0E,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAI7vC,EAAUpR,KAAKilD,wBAAwBr1C,EAAMuzC,EAASmB,EAAStD,GACnE,IAAK5vC,EAAS,OAAO,KACrB,IAAI7C,EAAOvO,KAAKwmD,iBAAiBp1C,GASjC,OARK7C,GACCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe67C,2CACf72C,EAAK1E,OAIJqD,EAID,qBAENqB,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKG,KAErB06B,EAAyBN,EAAWO,QAEpC,IAAI1yC,EAAOvO,KAAKylD,sBAAsB71C,EAAMuzC,EAASmB,EAAStD,GAC9D,IAAKzyC,EAAM,OAAO,KAClB,IAAI6C,EAAUpR,KAAKumD,iBAAiBh4C,GASpC,OARK6C,GACC4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe88C,kCACf93C,EAAK1E,MAAOqD,EAAK/C,YAIhB4F,EAID,sBAENxB,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKG,KAErB06B,EAAyBN,EAAWO,QAEpC,IAAI+F,EAAmBp3C,EAAKU,WACxB2oB,EAASj5B,KAAK4mD,iBAChBI,EACA7D,EACAmB,EACAtD,GAEF,IAAK/nB,EAAQ,OAAO,KACpB,OAAQA,EAAOxrB,MACb,KAAK,EAAA2R,YAAYsN,mBAAoB,CAEnC,GACsBuM,EAAQnU,cAAgB,EAAA+jC,aAAa3vB,WACzDtpB,EAAKH,UAAUxD,OAAS,EAExB,OAAOjM,KAAK2jD,kBAAkB/zC,EAAKH,UAAU,GAAI0zC,EAASmB,EAAStD,GAErE,IAAI9uB,EAAWlyB,KAAK8oD,eAAel5C,EAAyBqpB,EAAQkqB,EAASnC,GAC7E,OAAK9uB,EACEA,EAASpc,UAAUpH,WADJ,KAGxB,KAAK,EAAA0Q,YAAY+X,gBAAiB,OAAwB8B,EAAQnjB,UAAUpH,WAQ9E,OANIsyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAem+C,uGACf/B,EAAiB97C,MAAO+tB,EAAOnU,cAG5B,KAID,sBAENlV,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAIhwC,EAAcrB,EAAKqB,YACvB,OAAOjR,KAAK4mD,iBAAiB31C,EAAY3G,OAAO2G,EAAYhF,QAAU,GAAIk3C,EAASmB,EAAStD,GAItF,uBAENpxC,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAIhwC,EAAcrB,EAAKqB,YACvB,OAAOjR,KAAK2jD,kBAAkB1yC,EAAY3G,OAAO2G,EAAYhF,QAAU,GAAIk3C,EAASmB,EAAStD,GAIvF,2BAENpxC,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,IAAI78B,EAAiBpkB,KAAKqyB,QAAQjO,eAElC,OADA9Z,OAAO8Z,EAAevX,IAAI,EAAAsZ,KAAKviB,OACxBwgB,EAAeljB,IAAI,EAAAilB,KAAKviB,MAIzB,4BAENgM,EAEAuzC,EAEAmB,EAAgB,EAAAn+B,KAAKkwB,KAErB2K,EAAyBN,EAAWO,QAEpC,OAAO,EAAA96B,KAAKviB,KAIN,wBAENgM,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI1yC,EAAOvO,KAAKomD,yBAAyBx2C,EAAMuzC,EAASmB,EAAStD,GACjE,IAAKzyC,EAAM,OAAO,KAClB,IAAI6C,EAAUpR,KAAKumD,iBAAiBh4C,GASpC,OARK6C,GACC4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe88C,kCACf93C,EAAK1E,MAAOqD,EAAK/C,YAIhB4F,EAID,yBAENxB,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI+H,EAAWhpD,KAAK2jD,kBAAkB/zC,EAAK6C,OAAQ0wC,EAASmB,EAAStD,GACrE,IAAKgI,EAAU,OAAO,KACtB,IAAIC,EAAWjpD,KAAK2jD,kBAAkB/zC,EAAK8C,OAAQywC,EAAS6F,EAAUhI,GACtE,IAAKiI,EAAU,OAAO,KACtB,IAAId,EAAa,EAAAhiC,KAAKiiC,kBAAkBY,EAAUC,GAAU,GAS5D,OARKd,GACCnH,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAey9C,8CACfz4C,EAAK1E,MAAO,KAAM89C,EAASx9C,WAAYy9C,EAASz9C,YAI/C28C,EAID,oBAENv4C,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI7vC,EAAUpR,KAAK2qB,gBAAgB/a,EAAK7B,SAAUo1C,EAAQE,eAAgBrC,GAC1E,OAAK5vC,EACDA,EAAQ3D,MAAQ,EAAA2R,YAAYyK,gBACvB7pB,KAAKyhD,8BACMrwC,EAChBxB,EAAKvB,cACL80C,EAAQE,eACR,EAAA3B,QAAqByB,EAAQvuB,yBAC7BhlB,EACAoxC,IAGAA,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAes+C,qCACft5C,EAAK1E,OAGF,MAjBc,KAqBf,qBAEN0E,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI7vC,EAAUpR,KAAKklD,oBAAoBt1C,EAAMuzC,EAASmB,EAAStD,GAC/D,IAAK5vC,EAAS,OAAO,KACrB,IAAI7C,EAAOvO,KAAKwmD,iBAAiBp1C,GASjC,OARK7C,GACCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe67C,2CACf72C,EAAK1E,OAIJqD,EAID,yBAENqB,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,IAAI1yC,EAAOvO,KAAK4lD,0BAA0Bh2C,EAAMuzC,EAASmB,EAAStD,GAClE,IAAKzyC,EAAM,OAAO,KAClB,IAAI6C,EAAUpR,KAAKumD,iBAAiBh4C,GASpC,OARK6C,GACC4vC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe88C,kCACf93C,EAAK1E,MAAOqD,EAAK/C,YAIhB4F,EAID,0BAENxB,EAEAuzC,EAEAmB,EAEAtD,EAAyBN,EAAWO,QAEpC,OAAOjhD,KAAKmhD,oBAAoBvxC,EAAKmB,YAAY+E,UAAWqtC,EAAQE,eAAgBF,EAAQvuB,wBAAyBosB,GAMvH,gBAEE/+C,EAEAoM,EAEA0yC,EAA6B,EAAAW,UAE7BV,EAAyBN,EAAWO,QAEpC,IAAIkI,EAAelnD,EAAUyZ,OAAOjO,MAAQ,EAAA2R,YAAY2N,mBACpD9qB,EAAUyZ,OAAOA,OACjBzZ,EAAUyZ,OACV2J,EAA8B,KAC9BqP,EAAcrmB,EAAgB,EAAA+6C,cAAc/6C,GAAiB,GAGjE,GAAIpM,EAAUwrB,GAAG,EAAAprB,YAAYsvB,UAAW,CACtCrnB,OAAO6+C,EAAa17C,MAAQ,EAAA2R,YAAY9E,OACxC+K,EAAuB8jC,EAGvB,IAAIE,EAAmBpnD,EAAUqnD,oBAAoB50B,GACrD,GAAI20B,EAAkB,OAAOA,EAG7B,IAAIE,EAAqBlkC,EAAchX,cACvC,GAAIk7C,EAAoB,CACtB,IAAIC,EAAsBl/C,OAAO+a,EAAcpjB,UAAUsV,oBACrDkyC,EAAwBD,EAAoBv9C,OAChD3B,OAAOm/C,GAAyBD,EAAoBv9C,QACpD,IAAK,IAAI5L,EAAI,EAAGA,EAAIopD,IAAyBppD,EAAG,CAC9C,IAAIqpD,EAAyBF,EAAoBnpD,GAAGO,KAAKmL,KACpDg1C,EAASl0C,IAAI68C,IAChB3I,EAAS/zC,IACP08C,EACAH,EAAmBlpD,UAKtB,CACLiK,OAAO6+C,EAAa17C,MAAQ,EAAA2R,YAAY9E,OACxC,IAAI+uC,EAAmBpnD,EAAUqnD,oBAAoB50B,GACrD,GAAI20B,EAAkB,OAAOA,EAI/B,IAEIM,EAFAC,EAAgB3nD,EAAUuhD,iBAC1BjsC,EAAqBtV,EAAUsV,mBAEnC,GAAIlJ,IAAkBs7C,EAA2Bt7C,EAAcpC,QAAS,CACtE3B,OAAOiN,GAAsBoyC,GAA4BpyC,EAAmBtL,QAC5E,IAAK,IAAI5L,EAAI,EAAGA,EAAIspD,IAA4BtpD,EAC9C0gD,EAAS/zC,IACeuK,EAAoBlX,GAAGO,KAAKmL,KAClDsC,EAAchO,SAIlBiK,QAAQiN,GAAmD,GAA7BA,EAAmBtL,QAInD,IAAImqB,EAAwB,KACxBznB,EAAmBi7C,EAAcj7C,iBACrC,GAAIA,EAAkB,CAOpB,KANAynB,EAAWp2B,KAAKgiD,YACdrzC,EACA1M,EAAUyZ,OACVqlC,EACAC,IAEa,OAAO,KACtBD,EAAS/zC,IAAI,EAAAhK,YAAYsC,MAAO8wB,QACvB/Q,IACT+Q,EAAW/Q,EAAc9W,KACzBwyC,EAAS/zC,IAAI,EAAAhK,YAAYsC,MAAO8wB,IAIlC,IAgCI1nB,EAhCAm7C,EAAsBD,EAAcn7C,WACpCq7C,EAAyBD,EAAoB59C,OAC7CoqB,EAAiB,IAAI7uB,MAAYsiD,GACjC1S,EAAiB,IAAI5vC,MAAcsiD,GACnCzS,EAAqB,EACzB,IAAK,IAAIh3C,EAAI,EAAGA,EAAIypD,IAA0BzpD,EAAG,CAC/C,IAAI0pD,EAAuBF,EAAoBxpD,GAC3C0pD,EAAqB16C,eAAiB,EAAA2I,cAAckhC,UACtD7B,EAAqBh3C,EAAI,GAE3B,IAAI4hD,EAAW8H,EAAqBx7C,KACpC,GAAI,EAAA+zC,cAAcL,GAOhB,OANIjB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe23C,cACfN,EAAS/2C,OAGN,KAET,IAAIorB,EAAgBt2B,KAAKgiD,YACvBC,EACAhgD,EAAUyZ,OACVqlC,EACAC,GAEF,IAAK1qB,EAAe,OAAO,KAC3BD,EAAeh2B,GAAKi2B,EACpB8gB,EAAe/2C,GAAK0pD,EAAqBnpD,KAAKmL,KAKhD,GAAI9J,EAAUwrB,GAAG,EAAAprB,YAAYmtB,KAC3B9gB,EAAa,EAAAyX,KAAKG,UACb,GAAIrkB,EAAUwrB,GAAG,EAAAprB,YAAYmY,aAClC9L,EAAapE,OAAO+a,GAAe9W,SAC9B,CACL,IAAI0zC,EAAW2H,EAAcl7C,WAC7B,GAAI,EAAA4zC,cAAcL,GAOhB,OANIjB,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe23C,cACfN,EAAS/2C,OAGN,KAET,IAAIqD,EAAOvO,KAAKgiD,YACdC,EACAhgD,EAAUyZ,OACVqlC,EACAC,GAEF,IAAKzyC,EAAM,OAAO,KAClBG,EAAaH,EAGf,IAAIuH,EAAY,IAAI,EAAAmd,UAAUjzB,KAAKqyB,QAASgE,EAAgB3nB,EAAY0nB,GACxEtgB,EAAUshC,eAAiBA,EAC3BthC,EAAUuhC,mBAAqBA,EAE/B,IAAI1iB,EAAyB1yB,EAAUrB,KACnC8zB,EAAYzoB,SAAQ0oB,GAA0B,IAAMD,EAAc,KACtE,IAAIxC,EAAW,IAAI,EAAAnM,SACjB4O,EACA1yB,EACA6T,EACAirC,GAGF,OADA9+C,EAAU+nD,oBAAoBt1B,EAAaxC,GACpCA,EAIT,iCAEEjwB,EAEAwV,EAEAqpC,EAEAC,EAEAkJ,EAEAjJ,EAAyBN,EAAWO,QAEpC,IAAIkI,EAAelnD,EAAUyZ,OAAOjO,MAAQ,EAAA2R,YAAY2N,mBACpD9qB,EAAUyZ,OAAOA,OACjBzZ,EAAUyZ,OACVooC,EAAuC,KAG3C,GAAI7hD,EAAUwrB,GAAG,EAAAprB,YAAYokB,SAAU,CAGrC,GAAIxkB,EAAUwrB,GAAG,EAAAprB,YAAYsvB,UAAW,CACtCrnB,OAAO6+C,EAAa17C,MAAQ,EAAA2R,YAAY9E,OACxC,IAAIivC,EAA6BJ,EAAc96C,cAC/C,GAAIk7C,EAAoB,CACtB,IAAIhyC,EAAqBjN,OAAe6+C,EAAclnD,UAAUsV,oBAC5DkyC,EAAwBF,EAAmBt9C,OAC/C3B,OAAOm/C,GAAyBlyC,EAAmBtL,QACnD,IAAK,IAAI5L,EAAI,EAAGA,EAAIopD,IAAyBppD,EAC3C0gD,EAAS/zC,IACPuK,EAAmBlX,GAAGO,KAAKmL,KAC3Bw9C,EAAmBlpD,KAc3B,KARAyjD,EAAwB9jD,KAAK+hD,qBAC3Bz3C,OAAOrI,EAAUsV,oBACjBE,EACAqpC,EACAC,EACAkJ,EACAjJ,IAE0B,OAAO,UAInC,GAA0B,OAAtBvpC,GAA8BA,EAAkBxL,OAOlD,OANI+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe02C,sBACf2I,EAAW/+C,MAAOjJ,EAAU6iB,cAGzB,KAKX,OAAO9kB,KAAK2sB,gBACV1qB,EACA6hD,EACA/C,EACAC,GAQJ,aAEE/+C,EAEAoM,EAEA0yC,EAA6B,EAAAW,UAE7BV,EAAyBN,EAAWO,QAEpC,IAAIvsB,EAAcrmB,EAAgB,EAAA+6C,cAAc/6C,GAAiB,GAI7D6jB,EAAWjwB,EAAUqnD,oBAAoB50B,GAC7C,GAAIxC,EAAU,OAAOA,EAGrB,IAAIg4B,EAAwBjoD,EAAUrB,KAClC8zB,EAAYzoB,SAAQi+C,GAAyB,IAAMx1B,EAAc,KACrExC,EAAW,IAAI,EAAAgG,MAAMgyB,EAAuBjoD,EAAWoM,GACvDpM,EAAU+nD,oBAAoBt1B,EAAaxC,GAC3C,IAAIi4B,EAAiBnqD,KAAK6gD,oBAK1B,GAJAsJ,EAAe39C,KAAK0lB,GAIhB7jB,EAAe,CACjB,IAAIkJ,EAAqBjN,OAAOrI,EAAUsV,oBACtC+rC,EAAoB/rC,EAAmBtL,OACvCmO,EAAmB/L,EAAcpC,OACrC3B,OAAO8P,GAAoBkpC,GAC3B,IAAK,IAAIjjD,EAAI,EAAGA,EAAI+Z,IAAoB/Z,EACtC0gD,EAAS/zC,IAAIuK,EAAmBlX,GAAGO,KAAKmL,KAAMsC,EAAchO,QAEzD,CACL,IAAIkX,EAAqBtV,EAAUsV,mBACnCjN,SAASiN,GAAsBA,EAAmBtL,SAEpDimB,EAAS0C,wBAA0BmsB,EAGnC,IAAIn2B,EAAgB3oB,EAAU2oB,cAC9B,GAAIA,EAAe,CACjB,IAAI4H,EAAiC5H,EACrC,GACE,GAAI4H,GAAWvwB,EAMb,OALAjC,KAAK0oB,MACH,EAAA9d,eAAew/C,mEACfnoD,EAAU8oB,eAAe7f,MACzBjJ,EAAU6iB,cAEL,WAEF0N,EAAUA,EAAQ5H,eAC3B,IAAIH,EAAcngB,OAAOrI,EAAUwoB,aAC/BoO,EAAO74B,KAAKyhD,8BACd72B,EACAH,EAAYpc,cACZpM,EAAUyZ,OACV,EAAAgmC,QAAQX,GACRt2B,EACAu2B,GAEF,IAAKnoB,EAAM,OAAO,KAOlB,GANA3G,EAASm4B,QAAQxxB,GAMbsxB,EAAe/2B,SAASyF,GAAO,OAAO3G,EAK5C,OADAlyB,KAAKsqD,mBAAmBp4B,EAAU8uB,GAC3B9uB,EAID,mBAENA,EAEA8uB,GAEA,IAAIn0B,EAAkBqF,EAASze,QAC1BoZ,IAAiBqF,EAASze,QAAUoZ,EAAkB,IAAIllB,KAG/D,IAAIwiD,EAAiBnqD,KAAK6gD,oBACtBxpB,EAAoB,EACpBwB,EAAO3G,EAAS2G,KACpB,GAAIA,EAAM,CACRvuB,QAAQ6/C,EAAe/2B,SAASyF,IAChC,IAAI0xB,EAAc1xB,EAAKplB,QACvB,GAAI82C,EACF,IAAK,IAAKC,EAAgBC,KAAeF,EACvC19B,EAAgB7f,IAAIw9C,EAAgBC,GAGxCpzB,EAAewB,EAAKT,iBAItB,IAAIn2B,EAAYiwB,EAASjwB,UACrByoD,EAA2BzoD,EAAU4qB,gBACzC,GAAI69B,EACF,IAAK,IAAI59B,KAAU49B,EAAyB14C,SAC1C,OAAQ8a,EAAOrf,MAEb,KAAK,EAAA2R,YAAYgY,gBAAiB,CAChC,IAAIuzB,EAAiC79B,EAAQm1B,SACzC2I,EAAyB,KAE7B,GAAKD,EAoBHC,EAAY5qD,KAAKgiD,YACf2I,EACA1oD,EAAUyZ,OACVwW,EAAS0C,wBACTosB,OAxBgB,CAClB,GAAInoB,EAAM,CACR,IAAI0xB,EAAc1xB,EAAKplB,QACvB,GAAI82C,GAAeA,EAAY19C,IAAqBigB,EAAQlsB,MAAO,CACjE,IAAIiqD,EAAYN,EAAYrpD,IAAqB4rB,EAAQlsB,MACpDiqD,EAAUp9B,GAAG,EAAAprB,YAAY23C,WAC5B1vC,OAAOugD,EAAUp9C,MAAQ,EAAA2R,YAAY+N,OACrCy9B,EAAoBC,EAAWt8C,OAIhCq8C,GACC5J,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe23C,cACEz1B,EAAQ/B,eAAe7f,MAAM+4C,OAYtD,IAAK2G,EAAW,MAChB,IAAItxB,EAAQ,IAAI,EAAAwxB,MAAsBh+B,EAAQoF,EAAU04B,GACxDtgD,OAAO,EAAAygD,WAAWH,EAAU/U,WAC5B,IAAIhT,EAAO+nB,EAAU/U,SAAW,EAC5Bxe,EAAewL,IAAMxL,EAAuC,GAAvBA,EAAewL,IACxDvJ,EAAMjC,aAAeA,EACrBA,GAAgBuzB,EAAU/U,SAC1B3jB,EAASnlB,IAAI+f,EAAOlsB,KAAM04B,GAC1B,MAEF,KAAK,EAAAla,YAAYsN,mBAAoB,CACnC,IAAIs+B,EAAqCl+B,EAAQm+B,QAAQ/4B,GACzDA,EAASnlB,IAAIi+C,EAAepqD,KAAMoqD,GAClC,MAEF,KAAK,EAAA5rC,YAAY2N,mBAAoB,CACnC,IAAIm+B,EAAmB,IAAI,EAAAC,SAA4Br+B,EAAQoF,GAC3DlF,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAIyK,EAAiBz3B,KAAK2sB,gBACxBK,EAAgBi+B,QAAQ/4B,GACxB,KACA,EAAAwvB,QAAQxvB,EAAS0C,yBACjBosB,GAEEvpB,IACFyzB,EAAiBzzB,eAAiBA,EAClCyzB,EAAiB99B,QAAQqK,EAAe3hB,UAAUpH,aAGtD,IAAIue,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAIyK,EAAiB13B,KAAK2sB,gBACxBM,EAAgBg+B,QAAQ/4B,GACxB,KACA,EAAAwvB,QAAQxvB,EAAS0C,yBACjBosB,GAEEtpB,IACFwzB,EAAiBxzB,eAAiBA,EAC7BwzB,EAAiBz9B,GAAG,EAAAprB,YAAYywB,YACnCxoB,OAAyD,GAAlDotB,EAAe5hB,UAAUugB,eAAepqB,QAC/Ci/C,EAAiB99B,QAAQsK,EAAe5hB,UAAUugB,eAAe,MAIvEnE,EAASnlB,IAAIm+C,EAAiBtqD,KAAMsqD,GACpC,MAEF,QAAS5gD,QAAO,GAMtB4nB,EAASkG,iBAAmBf,EAG5B,CACE,IAAI+zB,EAAgBl5B,EAAS/I,aAAa,EAAAnmB,YAAYwC,aACtD,GAAI4lD,GAAiBA,EAAc1vC,SAAWwW,EAAU,CACtD5nB,OAAO8gD,EAAc39C,MAAQ,EAAA2R,YAAYsN,oBACzC,IAAI2+B,EAAerrD,KAAK2sB,gBACHy+B,EACnB,KACA9gD,OAAO4nB,EAAS0C,yBAChBosB,GAEEqK,IAAcn5B,EAASmG,oBAAgCgzB,IAK/D,IAAK,IAAK59C,EAAM69C,KAAsBrpD,EAAUwuB,mBAAoB,CAElE,IAAI86B,EACJ,GAFAjhD,OAAOmD,GAAQ,EAAA0R,aAAamC,SAExBgqC,EAAkB79B,GAAG,EAAAprB,YAAYsvB,UAAW,CAC9C,IAAIq5B,EAAiBM,EAAkBL,QAAQ/4B,GAC/Cq5B,EAAmBvrD,KAAK2sB,gBACtBq+B,EACA,KACA,EAAAtJ,UACAV,QAGFuK,EAAmBvrD,KAAK2sB,gBACtB2+B,EACA,KACA,EAAA5J,UACAV,GAGJ,IAAKuK,EAAkB,SACvB,IAAI/6B,EAAY0B,EAAS1B,UAKzB,GAJKA,IAAW0B,EAAS1B,UAAYA,EAAY,IAAI7oB,KAIjD4jD,EAAiB99B,GAAG,EAAAprB,YAAYsvB,UAClC,OAAQlkB,GACN,KAAK,EAAA0R,aAAa4B,WAClB,KAAK,EAAA5B,aAAa8B,WAClB,KAAK,EAAA9B,aAAaiC,YAClB,KAAK,EAAAjC,aAAakC,YAAa,CAC7B,IAAI3S,EAAa68C,EAAiBz1C,UAAUpH,WACvCA,EAAWooC,eAAe5kB,EAAS3jB,OAClCyyC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe4gD,mCACfF,EAAkB9H,iBAAiB90C,WAAWxD,MAAOwD,EAAWlD,WAAY0mB,EAAS3jB,KAAK/C,aAOtG,GAAKglB,EAAU3jB,IAAIY,GAUbuzC,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAegkB,oBACf28B,EAAiBx6C,YAAY7F,YAXjC,GADAslB,EAAUxjB,IAAIS,EAAM89C,GAChB99C,GAAQ,EAAA0R,aAAaK,aAAe/R,GAAQ,EAAA0R,aAAaM,YAAa,CACxE,IAAI4U,EAAQnC,EAASoG,eAChBjE,IAAOnC,EAASoG,eAAiBjE,EAAQ,IAAI,EAAAo3B,eAAev5B,IAC7DzkB,GAAQ,EAAA0R,aAAaK,aACvB6U,EAAMjH,QAAQm+B,EAAiBz1C,UAAUpH,aAcjD,IAAIg9C,EAAevB,EAAewB,QAAQz5B,GAC1C5nB,QAAQohD,GACRvB,EAAeyB,OAAOF,EAAc,GAMpC,IAAIG,EAAwB,IAAIrkD,MAChC,IAAK,IAAInH,EAAI,EAAGqX,EAAIyyC,EAAel+C,OAAQ5L,EAAIqX,IAAKrX,EAAG,CACrD,IAAIyrD,EAAU3B,EAAe9pD,GACzB6xB,GAAY45B,EAAQjzB,MAAMgzB,EAAsBr/C,KAAKs/C,GAE3D,IAAK,IAAIzrD,EAAI,EAAGqX,EAAIm0C,EAAsB5/C,OAAQ5L,EAAIqX,IAAKrX,EACzDL,KAAKsqD,mBAAmBuB,EAAsBxrD,GAAI2gD,GAKtD,8BAEE/+C,EAEAwV,EAEAqpC,EAEAC,EAEAkJ,EAEAjJ,EAAyBN,EAAWO,QAEpC,IAAI6C,EAAuC,KAG3C,GAAI7hD,EAAUwrB,GAAG,EAAAprB,YAAYokB,UAS3B,KARAq9B,EAAwB9jD,KAAK+hD,qBAC3Bz3C,OAAOrI,EAAUsV,oBACjBE,EACAqpC,EACAC,EACAkJ,EACAjJ,IAE0B,OAAO,UAInC,GAA0B,OAAtBvpC,GAA8BA,EAAkBxL,OAOlD,OANI+0C,GAAcN,EAAWO,QAC3BjhD,KAAK0oB,MACH,EAAA9d,eAAe02C,sBACf2I,EAAW/+C,MAAOjJ,EAAU6iB,cAGzB,KAKX,OAAO9kB,KAAKysB,aACVxqB,EACA6hD,EACA/C,EACAC,IA35FN,c,8ECrGA,aAMA,OAQA,OAuCA,OAIA,OASA,IAiEY+K,GAjEZ,SAAkBC,GAEhB,mBAKA,yBAEA,yCAEA,yCAEA,uBAEA,wBAEA,8BAEA,8BAEA,mCAEA,iCAKA,uDAEA,sDAEA,sDAEA,4DAEA,4DAKA,iDAKA,2CAWA,6CAzDF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KAiE3B,SAAYD,GAEV,mBAGA,2BAEA,yBAEA,yBAEA,iCAEA,4BAGA,wDAGA,oCAnBF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAwBtB,SAAkBE,GAEhB,yBAEA,mBAEA,qBANF,CAAkB,EAAAA,gBAAA,EAAAA,cAAa,KAU/B,MAAav1B,EAmDX,cAlCA,KAAAw1B,aAAyC,KASzC,cAAcC,GACZ,IAAI11B,EAAO,IAAIC,EAWf,OAVAD,EAAK/a,OAAS,KACd+a,EAAKpkB,MAAQ,EACbokB,EAAK01B,eAAiBA,EACtB11B,EAAK21B,cAAgB,KACrB31B,EAAKT,WAAa,KAClBS,EAAK/nB,WAAay9C,EAAer2C,UAAUpH,WAC3C+nB,EAAK7B,wBAA0Bu3B,EAAev3B,wBAC9C6B,EAAK41B,WAAa,GAClB51B,EAAK61B,eAAiB,KACtB71B,EAAK81B,kBAAoB,KAClB91B,EAIT,oBAAoB01B,EAA0BG,GAC5C,IAAI71B,EAAOC,EAAK/0B,OAAOwqD,GAKvB,OAJA11B,EAAK61B,eAAiBA,EACtB71B,EAAK81B,kBAAoBD,EAAexnC,aAAe,aAAewnC,EAAel3B,gBAAgB5pB,SAAS,IAC9GirB,EAAK/nB,WAAa49C,EAAex2C,UAAUpH,WAC3C+nB,EAAK7B,wBAA0B03B,EAAe13B,wBACvC6B,EAMT,eACE,OAA+B,OAAxBz2B,KAAKssD,eAId,qBACE,OAAOtsD,KAAKssD,gBAAkBtsD,KAAKmsD,eAIrC,GAAG/zC,GAAyB,OAAQpY,KAAKqS,MAAQ+F,IAASA,EAE1D,MAAMA,GAAyB,OAA8B,IAAtBpY,KAAKqS,MAAQ+F,GAEpD,IAAIA,GAAyBpY,KAAKqS,OAAS+F,EAE3C,MAAMA,GAAyBpY,KAAKqS,QAAU+F,EAG9C,KAAKo0C,GAA0B,GAC7B,IAAIC,EAAS,IAAI/1B,EAoBjB,OAnBA+1B,EAAO/wC,OAAS1b,KAChBysD,EAAON,eAAiBnsD,KAAKmsD,eACzBK,EACFC,EAAOp6C,OAAqB,KAAbrS,KAAKqS,OAOpBo6C,EAAOp6C,MAAQrS,KAAKqS,MACpBo6C,EAAOL,cAAgBpsD,KAAKosD,cAC5BK,EAAOz2B,WAAah2B,KAAKg2B,YAE3By2B,EAAO/9C,WAAa1O,KAAK0O,WACzB+9C,EAAO73B,wBAA0B50B,KAAK40B,wBACtC63B,EAAOJ,WAAarsD,KAAKqsD,WAAWK,QACpCD,EAAOH,eAAiBtsD,KAAKssD,eAC7BG,EAAOF,kBAAoBvsD,KAAKusD,kBACzBE,EAIT,aAAal+C,EAAY4rB,EAA0B,MACjD,IACIwyB,EAWAx2B,EAZAg2B,EAAiBnsD,KAAKmsD,eAE1B,OAAQ59C,EAAK2oC,gBACX,KAAK,EAAArc,WAAWn0B,IAAOimD,EAAQR,EAAe52B,SAAU,MACxD,KAAK,EAAAsF,WAAWl0B,IAAOgmD,EAAQR,EAAe32B,SAAU,MACxD,KAAK,EAAAqF,WAAW1zB,IAAOwlD,EAAQR,EAAe12B,SAAU,MACxD,KAAK,EAAAoF,WAAWzzB,IAAOulD,EAAQR,EAAez2B,SAAU,MACxD,KAAK,EAAAmF,WAAWxzB,KAAQslD,EAAQR,EAAex2B,UAAW,MAC1D,KAAK,EAAAkF,WAAWvzB,OAAUqlD,EAAQR,EAAev2B,YAAa,MAC9D,KAAK,EAAAiF,WAAW+xB,OAAUD,EAAQR,EAAet2B,YAAa,MAC9D,QAAS,MAAM,IAAIltB,MAAM,0BAG3B,GAAIwxB,EAAQ,CACV,GAAIwyB,GAASA,EAAM1gD,OACjB,IAAK,IAAI5L,EAAI,EAAGqX,EAAIi1C,EAAM1gD,OAAQ5L,EAAIqX,IAAKrX,EACzC,IAAK85B,EAAOttB,IAAI8/C,EAAMtsD,GAAGg0B,OAAQ,CAC/B8B,EAAQw2B,EAAMtsD,GACd,IAAIqX,EAAIi1C,EAAM1gD,OAAS,EACvB,KAAO5L,EAAIqX,GAAGwhB,UAAUyzB,EAAMtsD,GAAKssD,EAAY,EAANtsD,MAKzC,OAJAssD,EAAM1gD,OAASyL,EACfye,EAAM5nB,KAAOA,EACb4nB,EAAM9jB,MAAQ,EAAAhQ,YAAY8V,KAC1BnY,KAAK6sD,eAAe12B,EAAM9B,OAAO,GAC1B8B,EAIbA,EAAQg2B,EAAeW,SAASv+C,QAE5Bo+C,GAASA,EAAM1gD,SACjBkqB,EAAQw2B,EAAMI,OACRx+C,KAAOA,EACb4nB,EAAM9jB,MAAQ,EAAAhQ,YAAY8V,MAE1Bge,EAAQg2B,EAAeW,SAASv+C,GAIpC,OADAvO,KAAK6sD,eAAe12B,EAAM9B,OAAO,GAC1B8B,EAIT,oBAAoB5nB,EAAY4rB,EAA0B,MACxD,IAAIhE,EAAQn2B,KAAKgtD,aAAaz+C,EAAM4rB,GACpChE,EAAMnpB,IAAI,EAAA3K,YAAY4qD,QACtB,IAAIf,EAAelsD,KAAKksD,aAIxB,OAHKA,IAAclsD,KAAKksD,aAAeA,EAAe,IAAIvkD,KAC1DukD,EAAal/C,IAAI,QAAWhN,KAAKmsD,eAAe72B,oBAAsBa,GACtEn2B,KAAKktD,aAAa/2B,EAAM9B,MAAO03B,EAAWoB,UACnCh3B,EAIT,cAAcA,GACZ,IAAIA,EAAM1I,GAAG,EAAAprB,YAAY2xB,SAAzB,CACA1pB,OAAO6rB,EAAM9B,OAAS,GACtB,IACIs4B,EADAR,EAAiBnsD,KAAKmsD,eAG1B,OADA7hD,OAAqB,MAAd6rB,EAAM5nB,MACL4nB,EAAM5nB,KAAK2oC,gBACjB,KAAK,EAAArc,WAAWn0B,IACdimD,EAAQR,EAAe52B,WAAa42B,EAAe52B,SAAW,IAC9D,MAEF,KAAK,EAAAsF,WAAWl0B,IACdgmD,EAAQR,EAAe32B,WAAa22B,EAAe32B,SAAW,IAC9D,MAEF,KAAK,EAAAqF,WAAW1zB,IACdwlD,EAAQR,EAAe12B,WAAa02B,EAAe12B,SAAW,IAC9D,MAEF,KAAK,EAAAoF,WAAWzzB,IACdulD,EAAQR,EAAez2B,WAAay2B,EAAez2B,SAAW,IAC9D,MAEF,KAAK,EAAAmF,WAAWxzB,KACdslD,EAAQR,EAAex2B,YAAcw2B,EAAex2B,UAAY,IAChE,MAEF,KAAK,EAAAkF,WAAWvzB,OACdqlD,EAAQR,EAAev2B,cAAgBu2B,EAAev2B,YAAc,IACpE,MAEF,KAAK,EAAAiF,WAAW+xB,OACdD,EAAQR,EAAet2B,cAAgBs2B,EAAet2B,YAAc,IACpE,MAEF,QAAS,MAAM,IAAIltB,MAAM,0BAE3B2B,OAAO6rB,EAAM9B,OAAS,GACtBs4B,EAAMngD,KAAK2pB,IAIb,eAAev1B,GACb,IAAIsrD,EAAelsD,KAAKksD,aACxB,OAAIA,GAAgBA,EAAar/C,IAAIjM,GAAcsrD,EAAahrD,IAAIN,GAC7D,KAIT,eAAeA,EAAc2N,EAAY4rB,EAA0B,MACjE,IAAIizB,EAAcptD,KAAKgtD,aAAaz+C,EAAM4rB,GACtC+xB,EAAelsD,KAAKksD,aAKxB,OAJKA,EACA5hD,QAAQ4hD,EAAar/C,IAAIjM,IADXZ,KAAKksD,aAAeA,EAAe,IAAIvkD,IAE1DylD,EAAYpgD,IAAI,EAAA3K,YAAY4qD,QAC5Bf,EAAal/C,IAAIpM,EAAMwsD,GAChBA,EAIT,eAAexsD,EAAc2N,EAAY8lB,EAAY41B,EAA0B,MAC7E,GAAKjqD,KAAKksD,aACL,CACH,IAAImB,EAAgBrtD,KAAKksD,aAAahrD,IAAIN,GAC1C,GAAIysD,EAgBF,OAfIpD,IACGoD,EAAct8C,YAAY7F,MAAMO,OAAO6hD,SAQ1CttD,KAAKmsD,eAAe95B,QAAQ3J,MAC1B,EAAA9d,eAAeyjB,uBACf47B,EAAW/+C,MAAOtK,GATpBZ,KAAKmsD,eAAe95B,QAAQjE,aAC1B,EAAAxjB,eAAeyjB,uBACf47B,EAAW/+C,MACXmiD,EAAct8C,YAAYnQ,KAAKsK,MAC/BtK,IASCysD,OAnBartD,KAAKksD,aAAe,IAAIvkD,IAsBhD2C,OAAO+pB,EAAQr0B,KAAKmsD,eAAer3B,cAAc7oB,QACjD,IAAIshD,EAAc,IAAI,EAAAn5B,MAAMxzB,EAAMyzB,EAAO9lB,EAAMvO,KAAKmsD,gBAGpD,OADAnsD,KAAKksD,aAAal/C,IAAIpM,EAAM2sD,GACrBA,EAIT,sBACE,GAAIvtD,KAAKksD,aACP,IAAK,IAAIkB,KAAeptD,KAAKksD,aAAal6C,SACxC,GAAIo7C,EAAY3/B,GAAG,EAAAprB,YAAY4qD,QAC7B,OAAO,EAIb,OAAO,EAIT,mBACE,GAAIjtD,KAAKksD,aAAc,CACrB,IAAK,IAAIkB,KAAeptD,KAAKksD,aAAal6C,SACpCo7C,EAAY3/B,GAAG,EAAAprB,YAAY4qD,SAC7BjtD,KAAKwtD,cAAcJ,GAGvBptD,KAAKksD,aAAe,MAKxB,YAAYtrD,GACV,IACI6sD,EADAj7B,EAAuBxyB,KAE3B,GAAG,IAAKytD,EAAQj7B,EAAQ05B,eAAiBuB,EAAM5gD,IAAIjM,GAAO,OAAO6sD,EAAMvsD,IAAIN,SACpE4xB,EAAUA,EAAQ9W,QACzB,OAAO1b,KAAKmsD,eAAet3B,aAAa3zB,IAAIN,GAI9C,OAAOA,GACL,IAAIwQ,EAAUpR,KAAKwoD,YAAY5nD,GAC/B,OAAIwQ,GACGpR,KAAKqjD,eAAe5vB,OAAO7yB,GAIpC,YAAYyzB,EAAYjc,EAAkBs1C,GAAyB,GACjE,GAAIr5B,EAAQ,EAAG,OAAOq5B,EACtB,IAAIrB,EAAarsD,KAAKqsD,WACtB,OAAOh4B,EAAQg4B,EAAWpgD,SAAWitB,UAAUmzB,EAAWh4B,IAAUjc,IAASA,EAI/E,eAAeic,EAAYjc,EAAkBs1C,GAAyB,GACpE,GAAIr5B,EAAQ,EAAG,OAAOq5B,EACtB,IAAIrB,EAAarsD,KAAKqsD,WACtB,OAAOh4B,EAAQg4B,EAAWpgD,QAAmD,IAAxCitB,UAAUmzB,EAAWh4B,IAAUjc,GAItE,aAAaic,EAAYjc,GACvB,KAAIic,EAAQ,GAAZ,CACA,IAAIg4B,EAAarsD,KAAKqsD,WAClBh6C,EAAQgiB,EAAQg4B,EAAWpgD,OAASitB,UAAUmzB,EAAWh4B,IAAU,EACvEg4B,EAAWh4B,GAAShiB,EAAQ+F,GAI9B,eAAeic,EAAYjc,GACzB,KAAIic,EAAQ,GAAZ,CACA,IAAIg4B,EAAarsD,KAAKqsD,WAClBh6C,EAAQgiB,EAAQg4B,EAAWpgD,OAASitB,UAAUmzB,EAAWh4B,IAAU,EACvEg4B,EAAWh4B,GAAShiB,GAAS+F,GAI/B,iBACE,IAAI+zC,EAAiBnsD,KAAKmsD,eACtB3mC,EAAK2mC,EAAer2B,cACpB63B,EAAQxB,EAAep2B,WAG3B,OAFK43B,EACAA,EAAMnhD,KAAKgZ,GADJ2mC,EAAep2B,WAAa,CAAEvQ,GAEnC2mC,EAAen2B,WAAaxQ,EAAGha,SAAS,IAIjD,gBACE,IAAI2gD,EAAiBnsD,KAAKmsD,eACtBwB,EAAQrjD,OAAO6hD,EAAep2B,YAC9B9pB,EAAS3B,OAAOqjD,EAAM1hD,QAC1B0hD,EAAMZ,MACF9gD,EAAS,EACXkgD,EAAen2B,WAAa23B,EAAM1hD,EAAS,GAAGT,SAAS,KAEvD2gD,EAAen2B,WAAa,KAC5Bm2B,EAAep2B,WAAa,MAKhC,QAAQmE,GACN5vB,OAAO4vB,EAAMiyB,gBAAkBnsD,KAAKmsD,gBACpC7hD,OAAO4vB,EAAMxe,QAAU1b,MACvB,IAAI4tD,EAAa1zB,EAAM7nB,MAGnBrS,KAAKg2B,YAAckE,EAAMlE,aACV,KAAb43B,IACFA,IAAc,KAEhBA,IAAc,MAEZ5tD,KAAKosD,eAAiBlyB,EAAMkyB,gBAC9BwB,IAAc,MAGhB5tD,KAAKqS,MAAQrS,KAAKqS,MAAQu7C,EAC1B5tD,KAAKqsD,WAAanyB,EAAMmyB,WAI1B,cAAcnyB,EAAa2zB,EAAA,GAEzB,OADAvjD,OAAO4vB,EAAMiyB,gBAAkBnsD,KAAKmsD,gBAC5B0B,GACN,KAAK,EAAoB7tD,KAAK8tD,QAAQ5zB,GACtC,KAAK,EAAqB,OAQ5B,IAAI6zB,EAAY/tD,KAAKqS,MACjBu7C,EAAa1zB,EAAM7nB,MACnB27C,EAAW,EAGbA,GADc,EAAZD,EACU,EACU,EAAbH,EACG,IAE2B,KAA1BG,EAAYH,GAI3BI,GAAYD,EAAYH,EAAa,EACrCI,GAAYD,EAAYH,EAAa,EAGnCI,GADc,EAAZD,EACU,EACU,EAAbH,EACG,KAE2B,MAA1BG,EAAYH,GAGX,GAAZG,EACFC,GAAY,GACH9zB,EAAMlE,YAAch2B,KAAKg2B,WAEhCg4B,GADe,GAAbJ,EACU,KAE2B,MAA1BG,EAAYH,GAG3BI,GAAwB,KAAZD,EAGE,GAAZA,EACFC,GAAY,GACH9zB,EAAMkyB,gBAAkBpsD,KAAKosD,cAEpC4B,GADe,GAAbJ,EACU,KAE2B,MAA1BG,EAAYH,GAG3BI,GAAwB,KAAZD,EAGE,GAAZA,EAEAC,GADe,GAAbJ,EACU,GAEA,KAEQ,GAAbA,IACTI,GAAY,MAIdA,GAAYD,EAAYH,EAAa,IAErB,IAAZG,IACFC,GAAY,KAGdhuD,KAAKqS,MAAQ27C,EAAwB,MAAZD,EAEzB,IAAIE,EAAiBjuD,KAAKqsD,WACtB6B,EAAoBD,EAAehiD,OACnCkiD,EAAkBj0B,EAAMmyB,WACxB+B,EAAqBD,EAAgBliD,OACrCoiD,EAAgBC,IAAIJ,EAAmBE,GAC3C,IAAK,IAAI/tD,EAAI,EAAGA,EAAIguD,IAAiBhuD,EAAG,CACtC,IAAI0tD,EAAY1tD,EAAI6tD,EAAoBD,EAAe5tD,GAAK,EACxDutD,EAAavtD,EAAI+tD,EAAqBD,EAAgB9tD,GAAK,EAC3D2tD,EAAWD,EAAYH,GACzB7B,EAAWwC,SACXxC,EAAWyC,QACXzC,EAAWtE,QACXsE,EAAW0C,aAETV,EAAYhC,EAAWoB,SACrBS,EAAa7B,EAAWoB,SAC1Ba,GAAYjC,EAAWoB,SAEvBa,GAAYjC,EAAW2C,uBAEhBd,EAAa7B,EAAWoB,SACjCa,GAAYjC,EAAW2C,uBAEvBV,IAAaD,EAAYH,GAAc7B,EAAW2C,uBAEpDT,EAAe5tD,GAAK2tD,GAKxB,cAAct9C,EAAYC,GACxBrG,OAAOoG,EAAKy7C,gBAAkBx7C,EAAMw7C,gBACpC7hD,OAAOoG,EAAKy7C,gBAAkBnsD,KAAKmsD,gBAInC,IAAIwC,EAAYj+C,EAAK2B,MACjBu8C,EAAaj+C,EAAM0B,MACnB27C,EAAW,EAIXA,GAFY,EAAZW,EACe,EAAbC,EACU,EAEA,IAEQ,EAAbA,EACG,IAE2B,KAA1BD,EAAYC,GAGV,EAAZD,GAAwD,EAAbC,IAC9CZ,GAAY,GAGG,EAAZW,GAAwD,EAAbC,IAC9CZ,GAAY,GAKVA,GAFY,EAAZW,EACe,EAAbC,EACU,EAEA,KAEQ,EAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAKvBZ,GAFY,GAAZW,EACe,GAAbC,EACU,GAEA,KAEQ,GAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAKvBZ,GAFY,GAAZW,EACe,GAAbC,EACU,GAEA,KAEQ,GAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAKvBZ,GAFY,GAAZW,EACe,GAAbC,EACU,GAEA,KAEQ,GAAbA,EACG,KAE2B,MAA1BD,EAAYC,GAGV,IAAZD,GAAoD,IAAbC,IAC1CZ,GAAY,KAGG,IAAZW,GAAmD,IAAbC,IACzCZ,GAAY,KAGdhuD,KAAKqS,MAAQ27C,EAAyB,MAAbhuD,KAAKqS,MAE9B,IAAIw8C,EAAiBn+C,EAAK27C,WACtByC,EAAoBD,EAAe5iD,OACnC8iD,EAAkBp+C,EAAM07C,WACxB2C,EAAqBD,EAAgB9iD,OACrCoiD,EAAgBC,IAAIQ,EAAmBE,GACvCC,EAAgB,IAAIznD,MAAkB6mD,GAC1C,IAAK,IAAIhuD,EAAI,EAAGA,EAAIguD,IAAiBhuD,EAAG,CACtC,IAAIsuD,EAAYtuD,EAAIyuD,EAAoBD,EAAexuD,GAAK,EACxDuuD,EAAavuD,EAAI2uD,EAAqBD,EAAgB1uD,GAAK,EAC3D2tD,EAAWW,EAAYC,GACzB7C,EAAWwC,SACXxC,EAAWyC,QACXzC,EAAWtE,QACXsE,EAAW0C,aAETE,EAAY5C,EAAWoB,SACrByB,EAAa7C,EAAWoB,SAC1Ba,GAAYjC,EAAWoB,SAEvBa,GAAYjC,EAAW2C,uBAEhBE,EAAa7C,EAAWoB,SACjCa,GAAYjC,EAAW2C,uBAEvBV,IAAaW,EAAYC,GAAc7C,EAAW2C,uBAEpDO,EAAc5uD,GAAK2tD,EAErBhuD,KAAKqsD,WAAa4C,EAIpB,kCAAkCC,EAAcC,GAC9C,IAAIjB,EAAoBgB,EAAO7C,WAAWpgD,OACtCmiD,EAAqBe,EAAM9C,WAAWpgD,OACtCkgD,EAAiB+C,EAAO/C,eAC5B7hD,OAAO6hD,IAAmBgD,EAAMhD,gBAChC,IAAIr3B,EAAgBq3B,EAAer3B,cACnCxqB,OAAOwqB,IAAkBq6B,EAAMhD,eAAer3B,eAC9C,IAAK,IAAIz0B,EAAI,EAAGqX,EAAI03C,IAASlB,EAAmBE,GAAqB/tD,EAAIqX,IAAKrX,EAAG,CAC/E,IACIkO,EADQumB,EAAcz0B,GACTkO,KACjB,GAAIA,EAAKkf,GAAG,KACNyhC,EAAOG,YAAYhvD,EAAG0rD,EAAWyC,WAAaW,EAAME,YAAYhvD,EAAG0rD,EAAWyC,SAChF,OAAO,EAGX,GAAIjgD,EAAKkf,GAAG,MACNyhC,EAAOG,YAAYhvD,EAAG0rD,EAAWtE,WAAa0H,EAAME,YAAYhvD,EAAG0rD,EAAWtE,SAChF,OAAO,EAIb,OAAO,EAIT,gBAAgBvtB,GACd,IAAIg0B,EAAoBluD,KAAKqsD,WAAWpgD,OACpCmiD,EAAqBl0B,EAAMmyB,WAAWpgD,OAC1C,IAAK,IAAI5L,EAAI,EAAGqX,EAAI03C,IAASlB,EAAmBE,GAAqB/tD,EAAIqX,IAAKrX,EACxEL,KAAKqvD,YAAYhvD,EAAG0rD,EAAWyC,UAAYt0B,EAAMm1B,YAAYhvD,EAAG0rD,EAAWyC,UAC7ExuD,KAAK6sD,eAAexsD,EAAG0rD,EAAWyC,SAEhCxuD,KAAKqvD,YAAYhvD,EAAG0rD,EAAWtE,UAAYvtB,EAAMm1B,YAAYhvD,EAAG0rD,EAAWtE,UAC7EznD,KAAK6sD,eAAexsD,EAAG0rD,EAAWtE,SAEpCn9C,OAGEtK,KAAKsvD,eAAejvD,EAAG0rD,EAAWwD,eAAiBr1B,EAAMo1B,eAAejvD,EAAG0rD,EAAWwD,eAM5F,UAAUv/C,EAAqBzB,GAC7B,IAAKA,EAAKkf,GAAG,KAAqB,OAAO,EAIzC,OAAQ,EAAAoS,gBAAgB7vB,IACtB,KAAK,EAAA8qB,aAAawW,SAAU,CAC1B,IAAK,EAAAke,WAAWx/C,GAAO,MACvB,IAAImmB,EAAQn2B,KAAKmsD,eAAer3B,cAAc,EAAA26B,iBAAiBz/C,IAC/D,OAAQmmB,EAAM5nB,KAAKkf,GAAG,MAAuBztB,KAAKqvD,YAAYl5B,EAAM9B,MAAO03B,EAAWtE,SAAS,GAEjG,KAAK,EAAA3sB,aAAaiP,SAAU,CAC1B,IAAI5T,EAAQn2B,KAAKmsD,eAAer3B,cAAc,EAAA46B,iBAAiB1/C,IAC/D,OAAQmmB,EAAM5nB,KAAKkf,GAAG,MAAuBztB,KAAKqvD,YAAYl5B,EAAM9B,MAAO03B,EAAWtE,SAAS,IAGnG,OAAO,EAIT,qBAEEz3C,EAEA2/C,EAAmB,MAYnB,OAAQ,EAAA9vB,gBAAgB7vB,IACtB,KAAK,EAAA8qB,aAAawW,SAAU,CAC1B,IAAK,EAAAke,WAAWx/C,GAAO,MACvB,IAAImmB,EAAQn2B,KAAKmsD,eAAer3B,cAAc,EAAA26B,iBAAiBz/C,IAC1D2/C,IAAOA,EAAIN,YAAYl5B,EAAM9B,MAAO03B,EAAWtE,UAClDznD,KAAKktD,aAAa/2B,EAAM9B,MAAO03B,EAAWtE,SAE5CznD,KAAK4vD,qBAAqB,EAAAC,iBAAiB7/C,GAAO2/C,GAClD,MAEF,KAAK,EAAA70B,aAAaiP,SAAU,CAC1B,IAAI5T,EAAQn2B,KAAKmsD,eAAer3B,cAAc,EAAA46B,iBAAiB1/C,IAC1D2/C,IAAOA,EAAIN,YAAYl5B,EAAM9B,MAAO03B,EAAWtE,UAClDznD,KAAKktD,aAAa/2B,EAAM9B,MAAO03B,EAAWtE,SAE5C,MAEF,KAAK,EAAA3sB,aAAagW,GAAI,CACpB,IAAI57B,EAAU,EAAA46C,WAAW9/C,GACzB,IAAKkF,EAAS,MACV,EAAA2qB,gBAAgB3qB,IAAY,EAAA4lB,aAAa2O,QAIxC,EAAAvJ,kBAAkBhrB,IAAY,EAAA2lB,WAAWn0B,KAAoC,GAA7B,EAAAqpD,iBAAiB76C,IACjE,EAAAgrB,kBAAkBhrB,IAAY,EAAA2lB,WAAWl0B,KAAuC,GAAhC,EAAAqpD,oBAAoB96C,IAAkD,GAAjC,EAAA+6C,qBAAqB/6C,MAE3GlV,KAAK4vD,qBAAqB,EAAAM,eAAelgD,GAAO2/C,GAChD3vD,KAAK4vD,qBAAqB,EAAAO,UAAUngD,GAAO2/C,IAG/C,MAEF,KAAK,EAAA70B,aAAa8P,MAChB,OAAQ,EAAAwlB,WAAWpgD,IACjB,KAAK,EAAAirB,QAAQo1B,OACb,KAAK,EAAAp1B,QAAQq1B,OACXtwD,KAAKuwD,sBAAsB,EAAAC,cAAcxgD,GAAO2/C,GAIpD,MAEF,KAAK,EAAA70B,aAAaiQ,OAChB,OAAQ,EAAA0lB,YAAYzgD,IAClB,KAAK,EAAAkrB,SAASw1B,MAAO,CACnB,IAAIhgD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAmC,GAA1B,EAAAsmB,iBAAiBr/C,GAClE1Q,KAAK4vD,qBAAqBj/C,EAAOg/C,GACxB,EAAA9vB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAoC,GAA3B,EAAAsmB,iBAAiBp/C,IAC1E3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAElC,MAEF,KAAK,EAAAz0B,SAAS21B,MAAO,CACnB,IAAIngD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAuC,GAA7B,EAAAumB,oBAAoBt/C,IAA4C,GAA9B,EAAAu/C,qBAAqBv/C,GAEhG,EAAAmvB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAwC,GAA9B,EAAAumB,oBAAoBr/C,IAA8C,GAA/B,EAAAs/C,qBAAqBt/C,IAClH3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAFhC3vD,KAAK4vD,qBAAqBj/C,EAAOg/C,GAInC,MAEF,KAAK,EAAAz0B,SAAS41B,MAAO,CACnB,IAAIpgD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAmC,GAA1B,EAAAsmB,iBAAiBr/C,GAClE1Q,KAAK4vD,qBAAqBj/C,EAAOg/C,GACxB,EAAA9vB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAoC,GAA3B,EAAAsmB,iBAAiBp/C,IAC1E3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAElC,MAEF,KAAK,EAAAz0B,SAAS61B,MAAO,CACnB,IAAIrgD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAsC,GAA7B,EAAAumB,oBAAoBt/C,IAA4C,GAA9B,EAAAu/C,qBAAqBv/C,GACxG1Q,KAAK4vD,qBAAqBj/C,EAAOg/C,GACxB,EAAA9vB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAuC,GAA9B,EAAAumB,oBAAoBr/C,IAA8C,GAA/B,EAAAs/C,qBAAqBt/C,IACjH3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAElC,OAGJ,MAEF,KAAK,EAAA70B,aAAaoW,KAGhB,OAFW,EAAA8f,cAAchhD,IAGvB,KAFYhQ,KAAKmsD,eAAe95B,QAEnBtG,eAAejH,aAC1B9kB,KAAK4vD,qBAAqB,EAAAqB,eAAejhD,EAAM,GAAI2/C,GAIvD,OAMN,sBAEE3/C,EAEA2/C,EAAmB,MAGnB,OAAQ,EAAA9vB,gBAAgB7vB,IACtB,KAAK,EAAA8qB,aAAa8P,MAChB,OAAQ,EAAAwlB,WAAWpgD,IACjB,KAAK,EAAAirB,QAAQo1B,OACb,KAAK,EAAAp1B,QAAQq1B,OACXtwD,KAAK4vD,qBAAqB,EAAAY,cAAcxgD,GAAO2/C,GAInD,MAEF,KAAK,EAAA70B,aAAagW,GAAI,CACpB,IAAI77B,EAAS,EAAAk7C,UAAUngD,GACvB,GAAI,EAAA6vB,gBAAgB5qB,IAAW,EAAA6lB,aAAa2O,MAAO,CAEjD,IADc,EAAAqmB,WAAW9/C,GACX,MAGd,IAAIkhD,EAAW,EAAAhxB,kBAAkBjrB,IAE9Bi8C,GAAY,EAAAr2B,WAAWn0B,KAAmC,GAA5B,EAAAqpD,iBAAiB96C,IAC/Ci8C,GAAY,EAAAr2B,WAAWl0B,MAAuC,GAA/B,EAAAqpD,oBAAoB/6C,IAAgD,GAAhC,EAAAg7C,qBAAqBh7C,OAEzFjV,KAAKuwD,sBAAsB,EAAAL,eAAelgD,GAAO2/C,GACjD3vD,KAAKuwD,sBAAsB,EAAAT,WAAW9/C,GAAO2/C,IAIjD,MAEF,KAAK,EAAA70B,aAAaiQ,OAChB,OAAQ,EAAA0lB,YAAYzgD,IAElB,KAAK,EAAAkrB,SAASw1B,MAAO,CACnB,IAAIhgD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAmC,GAA1B,EAAAsmB,iBAAiBr/C,GAClE1Q,KAAK4vD,qBAAqBj/C,EAAOg/C,GACxB,EAAA9vB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAoC,GAA3B,EAAAsmB,iBAAiBp/C,IAC1E3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAElC,MAEF,KAAK,EAAAz0B,SAAS21B,MAAO,CACnB,IAAIngD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAsC,GAA7B,EAAAumB,oBAAoBt/C,IAA4C,GAA9B,EAAAu/C,qBAAqBv/C,GACxG1Q,KAAK4vD,qBAAqBj/C,EAAOg/C,GACxB,EAAA9vB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAuC,GAA9B,EAAAumB,oBAAoBr/C,IAA8C,GAA/B,EAAAs/C,qBAAqBt/C,IACjH3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAElC,MAEF,KAAK,EAAAz0B,SAAS41B,MAAO,CACnB,IAAIpgD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAmC,GAA1B,EAAAsmB,iBAAiBr/C,GAClE1Q,KAAK4vD,qBAAqBj/C,EAAOg/C,GACxB,EAAA9vB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAoC,GAA3B,EAAAsmB,iBAAiBp/C,IAC1E3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAElC,MAEF,KAAK,EAAAz0B,SAAS61B,MAAO,CACnB,IAAIrgD,EAAO,EAAAigD,cAAc3gD,GACrBW,EAAQ,EAAAigD,eAAe5gD,GACvB,EAAA6vB,gBAAgBnvB,IAAS,EAAAoqB,aAAa2O,OAAuC,GAA7B,EAAAumB,oBAAoBt/C,IAA4C,GAA9B,EAAAu/C,qBAAqBv/C,GAEhG,EAAAmvB,gBAAgBlvB,IAAU,EAAAmqB,aAAa2O,OAAwC,GAA9B,EAAAumB,oBAAoBr/C,IAA8C,GAA/B,EAAAs/C,qBAAqBt/C,IAClH3Q,KAAK4vD,qBAAqBl/C,EAAMi/C,GAFhC3vD,KAAK4vD,qBAAqBj/C,EAAOg/C,GAInC,SAaV,YAAY3/C,EAAqBzB,GAM/B,GAHAjE,OAAOiE,GAAQ,EAAA4X,KAAKG,OAGf/X,EAAKkf,GAAG,IAAsC,OAAO,EAE1D,IAAIza,EACJ,OAAQ,EAAA6sB,gBAAgB7vB,IAGtB,KAAK,EAAA8qB,aAAaiP,SAAU,CAC1B,IAAI5T,EAAQn2B,KAAKmsD,eAAer3B,cAAc,EAAA46B,iBAAiB1/C,IAC/D,OAAQhQ,KAAKqvD,YAAYl5B,EAAM9B,MAAO03B,EAAWyC,SAAS,IACnD2C,EAAsBh7B,EAAM5nB,KAAMA,GAI3C,KAAK,EAAAusB,aAAawW,SAEhB,OADAhnC,OAAO,EAAAklD,WAAWx/C,IACXhQ,KAAKoxD,YAAY,EAAAvB,iBAAiB7/C,GAAOzB,GAIlD,KAAK,EAAAusB,aAAamP,UAAW,CAE3B,IAAIvc,EAASpjB,OAAOtK,KAAKmsD,eAAe95B,QAAQpO,eAAe/iB,IAAIoJ,OAAO,EAAA+mD,iBAAiBrhD,MAE3F,OADA1F,OAAOojB,EAAOjgB,MAAQ,EAAA2R,YAAY1G,QAC3By4C,EAAsB7mD,OAAgBojB,EAAQnf,MAAOA,GAG9D,KAAK,EAAAusB,aAAaiQ,OAChB,OAAQ,EAAA0lB,YAAYzgD,IAGlB,KAAK,EAAAkrB,SAASw1B,MACd,KAAK,EAAAx1B,SAAS21B,MACd,KAAK,EAAA31B,SAASo2B,MACd,KAAK,EAAAp2B,SAASq2B,MACd,KAAK,EAAAr2B,SAAS41B,MACd,KAAK,EAAA51B,SAAS61B,MACd,KAAK,EAAA71B,SAASs2B,MACd,KAAK,EAAAt2B,SAASu2B,MACd,KAAK,EAAAv2B,SAASw2B,MACd,KAAK,EAAAx2B,SAASy2B,MACd,KAAK,EAAAz2B,SAAS02B,MACd,KAAK,EAAA12B,SAAS22B,MACd,KAAK,EAAA32B,SAAS42B,MACd,KAAK,EAAA52B,SAAS62B,MACd,KAAK,EAAA72B,SAAS82B,MACd,KAAK,EAAA92B,SAAS+2B,MACd,KAAK,EAAA/2B,SAASg3B,MACd,KAAK,EAAAh3B,SAASi3B,MACd,KAAK,EAAAj3B,SAASk3B,MACd,KAAK,EAAAl3B,SAASm3B,MACd,KAAK,EAAAn3B,SAASo3B,MACd,KAAK,EAAAp3B,SAASq3B,MACd,KAAK,EAAAr3B,SAASs3B,MACd,KAAK,EAAAt3B,SAASu3B,MACd,KAAK,EAAAv3B,SAASw3B,MACd,KAAK,EAAAx3B,SAASy3B,MACd,KAAK,EAAAz3B,SAAS03B,MACd,KAAK,EAAA13B,SAAS23B,MACd,KAAK,EAAA33B,SAAS43B,MACd,KAAK,EAAA53B,SAAS63B,MACd,KAAK,EAAA73B,SAAS83B,MACd,KAAK,EAAA93B,SAAS+3B,MAAO,OAAO,EAG5B,KAAK,EAAA/3B,SAASg4B,OACZ,QAEI,EAAArzB,gBAAgB7sB,EAAU,EAAA29C,cAAc3gD,KAAU,EAAA8qB,aAAa2O,QAEhC,GAA7B,EAAAsmB,iBAAiB/8C,IAEc,GAA7B,EAAA+8C,iBAAiB/8C,KAChBhT,KAAKoxD,YAAY,EAAAR,eAAe5gD,GAAOzB,KAI5C,EAAAsxB,gBAAgB7sB,EAAU,EAAA49C,eAAe5gD,KAAU,EAAA8qB,aAAa2O,QAEjC,GAA7B,EAAAsmB,iBAAiB/8C,IAEc,GAA7B,EAAA+8C,iBAAiB/8C,KAChBhT,KAAKoxD,YAAY,EAAAT,cAAc3gD,GAAOzB,KASjD,KAAK,EAAA2sB,SAASi4B,OAGZ,QAGM,EAAAtzB,gBAAgB7sB,EAAU,EAAA29C,cAAc3gD,KAAU,EAAA8qB,aAAa2O,OAC/D,EAAAsmB,iBAAiB/8C,IAAYzE,EAAK6kD,wBAAwB,EAAAjtC,KAAK/iB,OAC3DpD,KAAKoxD,YAAYp+C,EAASzE,IAG9B,EAAAsxB,gBAAgB7sB,EAAU,EAAA49C,eAAe5gD,KAAU,EAAA8qB,aAAa2O,OAChE,EAAAsmB,iBAAiB/8C,IAAYzE,EAAK6kD,wBAAwB,EAAAjtC,KAAK/iB,OAC3DpD,KAAKoxD,YAAYp+C,EAASzE,IAMtC,KAAK,EAAA2sB,SAASm4B,OAAQ,CACpB,IAAInwB,EAAQ,GAAK30B,EAAKkzB,KACtB,OAAO,EAAA5B,gBAAgB7sB,EAAU,EAAA49C,eAAe5gD,KAAU,EAAA8qB,aAAa2O,OAChE,EAAAsmB,iBAAiB/8C,GAAWkwB,EAIrC,KAAK,EAAAhI,SAASo4B,OAAQ,CACpB,IAAIpwB,EAAQ,GAAK30B,EAAKkzB,KACtB,OAAOzhC,KAAKoxD,YAAY,EAAAT,cAAc3gD,GAAOzB,KAC3C,EAAAsxB,gBAAgB7sB,EAAU,EAAA49C,eAAe5gD,KAAU,EAAA8qB,aAAa2O,OAChE,EAAAsmB,iBAAiB/8C,GAAWkwB,GAMhC,KAAK,EAAAhI,SAASq4B,OAAQ,CACpB,IAAIrwB,EAAQ,GAAK30B,EAAKkzB,KACtB,OAAOlzB,EAAKkf,GAAG,KAET,EAAAoS,gBAAgB7sB,EAAU,EAAA49C,eAAe5gD,KAAU,EAAA8qB,aAAa2O,OAChE,EAAAsmB,iBAAiB/8C,GAAWkwB,GAE9BljC,KAAKoxD,YAAY,EAAAT,cAAc3gD,GAAOzB,MACpC,EAAAsxB,gBAAgB7sB,EAAU,EAAA49C,eAAe5gD,KAAU,EAAA8qB,aAAa2O,OAChE,EAAAsmB,iBAAiB/8C,IAAYkwB,GAKrC,KAAK,EAAAhI,SAASs4B,OACd,KAAK,EAAAt4B,SAASu4B,OACd,KAAK,EAAAv4B,SAASw4B,OACZ,OAAO1zD,KAAKoxD,YAAY,EAAAT,cAAc3gD,GAAOzB,IACtCvO,KAAKoxD,YAAY,EAAAR,eAAe5gD,GAAOzB,GAGlD,MAGF,KAAK,EAAAusB,aAAa8P,MAChB,OAAQ,EAAAwlB,WAAWpgD,IAGjB,KAAK,EAAAirB,QAAQo1B,OACb,KAAK,EAAAp1B,QAAQq1B,OAAQ,OAAO,EAG5B,KAAK,EAAAr1B,QAAQ04B,OACb,KAAK,EAAA14B,QAAQ24B,OACb,KAAK,EAAA34B,QAAQ44B,UAAW,OAAOtlD,EAAKkzB,KAAO,EAE7C,MAIF,KAAK,EAAA3G,aAAa2O,MAAO,CACvB,IAAInoC,EAAa,EACjB,OAAQ,EAAA4+B,kBAAkBlwB,IACxB,KAAK,EAAA6qB,WAAWn0B,IAAOpF,EAAQ,EAAAyuD,iBAAiB//C,GAAO,MACvD,KAAK,EAAA6qB,WAAWl0B,IAAOrF,EAAQ,EAAA0uD,oBAAoBhgD,GAAO,MAC1D,KAAK,EAAA6qB,WAAW1zB,IAAO7F,EAAQ8B,IAAI,EAAA0wD,iBAAiB9jD,IAAQ,MAC5D,KAAK,EAAA6qB,WAAWzzB,IAAO9F,EAAQ8B,IAAI,EAAA2wD,iBAAiB/jD,IAAQ,MAC5D,QAAS1F,QAAO,GAElB,OAAQiE,EAAKd,MACX,KAAK,EAAa,OAAOnM,EAAQ4B,GAAG8wD,WAAa1yD,EAAQ4B,GAAGomC,UAC5D,KAAK,EAAc,OAAOhoC,EAAQ6B,IAAI6wD,WAAa1yD,EAAQ6B,IAAImmC,UAC/D,KAAK,EAAa,OAAOhoC,EAAQ,GAAKA,EAAQiC,GAAG+lC,UACjD,KAAK,EAAc,OAAOhoC,EAAQ,GAAKA,EAAQkC,IAAI8lC,UACnD,KAAK,GAAe,OAAuB,KAAP,EAARhoC,GAE9B,MAIF,KAAK,EAAAw5B,aAAasP,KAAM,CACtB,IAAI6pB,EACA71B,EAAS,EAAA81B,aAAalkD,GAC1B,OAAQ,EAAAmkD,aAAankD,IACnB,KAAK,EAAMikD,EAAW71B,EAAS,EAAAjY,KAAKjjB,GAAM,EAAAijB,KAAK5iB,GAAK,MACpD,KAAK,EAAM0wD,EAAW71B,EAAS,EAAAjY,KAAKhjB,IAAM,EAAAgjB,KAAK3iB,IAAK,MACpD,QAAWywD,EAAW71B,EAAS,EAAAjY,KAAK/iB,IAAM,EAAA+iB,KAAK1iB,IAEjD,OAAO0tD,EAAsB8C,EAAU1lD,GAMzC,KAAK,EAAAusB,aAAa6V,MAChB,IAAK,EAAAyjB,aAAapkD,GAAO,CACvB,IAAIyxB,EAAOn3B,OAAO,EAAA+pD,mBAAmBrkD,IACjCskD,EAAO,EAAAC,cAAcvkD,EAAMyxB,EAAO,GACtC,OAAOzhC,KAAKoxD,YAAYkD,EAAM/lD,GAEhC,MAIF,KAAK,EAAAusB,aAAagW,GAChB,OAAO9wC,KAAKoxD,YAAY,EAAAjB,UAAUngD,GAAOzB,IAClCvO,KAAKoxD,YAAY9mD,OAAO,EAAAwlD,WAAW9/C,IAAQzB,GAIpD,KAAK,EAAAusB,aAAa4W,OAChB,OAAO1xC,KAAKoxD,YAAY,EAAAoD,cAAcxkD,GAAOzB,IACtCvO,KAAKoxD,YAAY,EAAAqD,cAAczkD,GAAOzB,GAI/C,KAAK,EAAAusB,aAAaoW,KAAM,CACtB,IACI/sB,EADUnkB,KAAKmsD,eAAe95B,QACJlO,gBAC1BuwC,EAAepqD,OAAO,EAAA0mD,cAAchhD,IACxC,GAAImU,EAAgBtX,IAAI6nD,GAAe,CACrC,IAAIxiC,EAAW/N,EAAgBjjB,IAAIwzD,GACnCpqD,OAAO4nB,EAASzkB,MAAQ,EAAA2R,YAAY1E,UACpC,IAAIhM,EAAwBwjB,EAAUpc,UAAUpH,WAChD,OAAmBwjB,EAAUuE,KAAKhJ,GAAG,IAC9B0jC,EAAsBziD,EAAYH,GAE3C,OAAO,EAIT,KAAK,EAAAusB,aAAakF,YAAa,OAAO,EAExC,OAAO,EAGT,WAGE,IAFA,IAAI20B,EAAS,EACTj5C,EAAS1b,KAAK0b,OACXA,GACLA,EAASA,EAAOA,SACdi5C,EAEJ,IAAIroD,EAAK,IAAI9E,MAeb,OAdIxH,KAAKytB,GAAG,IAAoBnhB,EAAGE,KAAK,WACpCxM,KAAKytB,GAAG,IAA4BnhB,EAAGE,KAAK,mBAC5CxM,KAAKytB,GAAG,IAA4BnhB,EAAGE,KAAK,mBAC5CxM,KAAKytB,GAAG,IAAmBnhB,EAAGE,KAAK,UACnCxM,KAAKytB,GAAG,KAAmBnhB,EAAGE,KAAK,UACnCxM,KAAKytB,GAAG,KAAsBnhB,EAAGE,KAAK,aACtCxM,KAAKytB,GAAG,KAAsBnhB,EAAGE,KAAK,aACtCxM,KAAKytB,GAAG,MAAwBnhB,EAAGE,KAAK,eACxCxM,KAAKytB,GAAG,MAAuBnhB,EAAGE,KAAK,cACvCxM,KAAKytB,GAAG,MAAkCnhB,EAAGE,KAAK,yBAClDxM,KAAKytB,GAAG,OAAiCnhB,EAAGE,KAAK,wBACjDxM,KAAKytB,GAAG,OAAiCnhB,EAAGE,KAAK,wBACjDxM,KAAKytB,GAAG,OAAoCnhB,EAAGE,KAAK,2BACpDxM,KAAKytB,GAAG,OAAoCnhB,EAAGE,KAAK,2BACjD,QAAUxM,KAAKqjD,eAAiB,KAAOsR,EAAOnpD,WAAa,KAAOc,EAAGG,KAAK,MAKrF,SAAS0kD,EAAsB8C,EAAgB1jD,GAC7C,OAAQ0jD,EAASxmC,GAAG,IACbwmC,EAASxyB,KAAOlxB,EAAOkxB,MACvBwyB,EAASxmC,GAAG,IAAqBld,EAAOkd,GAAG,GAUpD,SAASmnC,EAAoB5kD,EAAqB6kD,GAChD,OAAQ,EAAAh1B,gBAAgB7vB,IACtB,KAAK,EAAA8qB,aAAaiP,SAChB8qB,EAAK9nD,IAAI,EAAA2iD,iBAAiB1/C,IAC1B,MAEF,KAAK,EAAA8qB,aAAawW,SAChBujB,EAAK9nD,IAAI,EAAA0iD,iBAAiBz/C,IAG5B,QAAS,EAAA8kD,SAAS9kD,EAAM6kD,EAAMD,IAxoClC,SAwnCA,0BAA+B5kD,EAAqB6kD,EAAiB,IAAIntD,KAEvE,OADA,EAAAotD,SAAS9kD,EAAM6kD,EAAMD,GACdC,I,8EC5xCT,SAAYjqD,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,6IACA,uIACA,uIACA,+GACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MAhJF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAoJ1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,+CACjB,KAAK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QhO,eAAerS,SACrC1F,EAAGE,KAAK,QACRF,EAAGE,KAAKmyG,EAAIlmF,UAAUjtB,YACtBc,EAAGE,KAAK,OAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,WAAS,EAAA3J,eAAA,EAAAA,eAGT,QACA,QACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,S,8EC7OA,oBAAyB87G,EAAUvqF,GAEjC,OADA/pB,OAAO+pB,GAAS,GAAKA,EAAQ,IACtB2hF,OACLd,QACE0J,EACAv/D,QACE60D,QACAttF,QAAQyN,KAGZ0zB,WAKJ,qBAA0B62D,EAAUvqF,EAAYwqF,GAE9C,OADAv0G,OAAO+pB,GAAS,GAAKA,EAAQ,IACtBwqF,EACHzJ,OACEwJ,EACAv/D,QACE60D,QACAttF,QAAQyN,KAGZ6gF,QACE0J,EACAhJ,QACEv2D,QACE60D,QACAttF,QAAQyN,Q,8EC9BpB,SAAkByqF,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bp+G,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAMq+G,EAAS,GAAJr+G,EACX,OAAOq+G,GAAM,IAAcA,GAAM,KACrB,IAALr+G,GACK,IAALA,GACAA,EAAI,SAmLqBsK,EAnLYtK,GAoL9B,KAAOsK,EAAO,QACrBg0G,EAAmBh0G,EAAai0G,IAFzC,IAAkCj0G,GA/KlC,8BAAmCtK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMq+G,EAAS,GAAJr+G,EACX,OAAOq+G,GAAM,IAAcA,GAAM,KAC1Br+G,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBsK,EAzKYtK,GA0K7B,KAAOsK,EAAO,QACrBg0G,EAAmBh0G,EAAak0G,IAFzC,IAAiCl0G,GArKjC,MAAMi0G,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Range,Set<DiagnosticCode>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range)) {\n        let codes = seen.get(range)!;\n        if (codes.has(code)) return;\n        codes.add(code);\n      } else {\n        let codes = new Set<DiagnosticCode>();\n        codes.add(code);\n        seen.set(range, codes);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonNames.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonNames.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var managedClasses = this.managedClasses;\n    var cyclics = new Set<Class>();\n    for (let instance of managedClasses.values()) {\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      for (let [baseName, baseType] of inheritedTypeArguments) {\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field !== null && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport enum NativeType {\n  None = 0 /* _BinaryenTypeNone */,\n  Unreachable = 1 /* _BinaryenTypeUnreachable */,\n  I32 = 2 /* _BinaryenTypeInt32 */,\n  I64 = 3 /* _BinaryenTypeInt64 */,\n  F32 = 4 /* _BinaryenTypeFloat32 */,\n  F64 = 5 /* _BinaryenTypeFloat64 */,\n  V128 = 6 /* _BinaryenTypeVec128 */,\n  Funcref = 7 /* _BinaryenTypeFuncref */,\n  Anyref = 8 /* _BinaryenTypeAnyref */,\n  Nullref = 9 /* _BinaryenTypeNullref */,\n  Exnref = 10 /* _BinaryenTypeExnref */,\n  Auto = -1 /* _BinaryenTypeAuto */\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  All = 511 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  NegI8x16 = 67 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 68 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 69 /* _BinaryenAllTrueVecI8x16 */,\n  NegI16x8 = 70 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 71 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 72 /* _BinaryenAllTrueVecI16x8 */,\n  NegI32x4 = 73 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 74 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 75 /* _BinaryenAllTrueVecI32x4 */,\n  NegI64x2 = 76 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 77 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 78 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 79 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 80 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 81 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 82 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 83 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 84 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 85 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 86 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 87 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 88 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 89 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 90 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 91 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 92 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 93 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 94 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 95 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 96 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 97 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 98 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 99 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 100 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = binaryen.__i32_load(out);\n      let binaryLen = binaryen.__i32_load(out + 4);\n      sourceMapPtr = binaryen.__i32_load(out + 8);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryLen);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) binaryen._free(cStr);\n      if (binaryPtr) binaryen._free(binaryPtr);\n      if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) binaryen._free(ptr);\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array(arity);\n  for (let i = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return binaryen._BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return binaryen._BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Any = 1023 /* _BinaryenSideEffectAny */,\n}\n\nexport function getSideEffects(expr: ExpressionRef): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr);\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  return getSideEffects(expr) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.text) {\n          case CommonNames.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonNames.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n      } while (current = current.basePrototype);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let field = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            field.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, field); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && scope.has(name)) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n    var combinedFlags = new Array<LocalFlags>(maxLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n      let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n      let newFlags = leftFlags & rightFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (leftFlags & LocalFlags.RETAINED) {\n        if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (rightFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      combinedFlags[i] = newFlags;\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","const binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinNames,\n  compileCall as compileBuiltinCall,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    var module = Module.create();\n    this.module = module;\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        for (let classInstance of cyclicClasses) {\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      for (let instance of lazyLibraryFunctions) {\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    module.setFunctionTable(1 + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(1));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport((<Field>element).internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport((<Field>element).internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) for (let element of members.values()) this.compileElement(element);\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.local_get(1, nativeValueType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false,\n          module.local_get(0, nativeThisType),\n          nativeValueType, instance.memoryOffset\n        ),\n        valueExpr\n      );\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, null,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  private addStaticBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) {\n      assert(index != 0); // first elem must be blank\n      return index;\n    }\n    var functionTable = this.functionTable;\n    index = 1 + functionTable.length; // first elem is blank\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileWhileStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    if (thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    return this.makeAssignment(\n      target,\n      valueExpr,\n      this.currentType,\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let instance = <Class>(<Property>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let instance = <Class>(<IndexSignature>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = instance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, instance.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = instance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, instance.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2);\n        let valueType = indexedSet.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(instance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonNames.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        for (let local of scopedLocals.values()) {\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(instance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let elementExpressions = (<ArrayLiteralExpression>expression).elementExpressions;\n\n        // Infer from first element in auto contexts\n        if (contextualType == Type.auto) {\n          return this.compileArrayLiteral(\n            Type.auto,\n            elementExpressions,\n            constraints,\n            expression\n          );\n        }\n\n        // Use contextual type if an array\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classType = contextualType.classReference;\n          if (classType) {\n            if (classType.prototype == this.program.arrayPrototype) {\n              return this.compileArrayLiteral(\n                assert(classType.typeArguments)[0],\n                elementExpressions,\n                constraints,\n                expression\n              );\n            }\n          }\n        }\n\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // infer common element type in auto contexts\n    var length = expressions.length;\n    if (elementType == Type.auto) {\n      for (let i = 0; i < length; ++i) {\n        let expression = expressions[i];\n        if (expression) {\n          let currentType = this.resolver.resolveExpression(expression, this.currentFlow, elementType);\n          if (!currentType) return module.unreachable();\n          if (elementType == Type.auto) elementType = currentType;\n          else if (currentType != elementType) {\n            let commonType = Type.commonDenominator(elementType, currentType, false);\n            if (commonType) elementType = commonType;\n            // otherwise triggers error further down\n          }\n        }\n      }\n      if (elementType /* still */ == Type.auto) {\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          reportNode.range, \"T\"\n        );\n        return module.unreachable();\n      }\n    }\n\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayType = arrayInstance.type;\n\n    // compile value expressions and find out whether all are constant\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], reportNode)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (!(constraints & Constraints.WILL_RETAIN)) {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      } else {\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.resolver.resolveFunction(prototype, null);\n          if (!instance) return module.unreachable();\n          if (!this.compileFunction(instance)) return module.unreachable();\n          this.currentType = instance.type;\n          return module.i32(this.ensureFunctionTableEntry(instance));\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonNames.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(codeLocation.range.line),\n          module.i32(codeLocation.range.column)\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(assert(toType.classReference).id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  Class\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinNames.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinNames.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinNames.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinNames.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinNames.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinNames.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinNames.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinNames.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinNames.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinNames.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinNames.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinNames.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.nextMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinNames.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinNames.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinNames.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinNames.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinNames.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinNames.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinNames.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinNames.atomic_sub:\n    case BuiltinNames.atomic_and:\n    case BuiltinNames.atomic_or:\n    case BuiltinNames.atomic_xor:\n    case BuiltinNames.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinNames.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinNames.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinNames.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinNames.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinNames.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinNames.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinNames.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinNames.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinNames.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinNames.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinNames.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinNames.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinNames.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinNames.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinNames.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinNames.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinNames.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinNames.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinNames.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinNames.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinNames.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        // use stdlib alternative if not supported\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinNames.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinNames.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinNames.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinNames.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinNames.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinNames.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinNames.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinNames.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinNames.v128: // alias for now\n    case BuiltinNames.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinNames.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinNames.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_avgr: { // avgr<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinNames.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinNames.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinNames.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinNames.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinNames.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinNames.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinNames.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinNames.i32_clz: return deferASM(BuiltinNames.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_clz: return deferASM(BuiltinNames.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_ctz: return deferASM(BuiltinNames.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_ctz: return deferASM(BuiltinNames.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_popcnt: return deferASM(BuiltinNames.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_popcnt: return deferASM(BuiltinNames.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_rotl: return deferASM(BuiltinNames.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_rotl: return deferASM(BuiltinNames.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i32_rotr: return deferASM(BuiltinNames.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_rotr: return deferASM(BuiltinNames.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_abs: return deferASM(BuiltinNames.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_abs: return deferASM(BuiltinNames.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_max: return deferASM(BuiltinNames.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_max: return deferASM(BuiltinNames.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_min: return deferASM(BuiltinNames.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_min: return deferASM(BuiltinNames.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_ceil: return deferASM(BuiltinNames.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_ceil: return deferASM(BuiltinNames.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_floor: return deferASM(BuiltinNames.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_floor: return deferASM(BuiltinNames.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_copysign: return deferASM(BuiltinNames.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_copysign: return deferASM(BuiltinNames.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_nearest: return deferASM(BuiltinNames.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_nearest: return deferASM(BuiltinNames.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_reinterpret_f32: return deferASM(BuiltinNames.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinNames.i64_reinterpret_f64: return deferASM(BuiltinNames.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_reinterpret_i32: return deferASM(BuiltinNames.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinNames.f64_reinterpret_i64: return deferASM(BuiltinNames.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_sqrt: return deferASM(BuiltinNames.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_sqrt: return deferASM(BuiltinNames.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f32_trunc: return deferASM(BuiltinNames.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_trunc: return deferASM(BuiltinNames.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_load8_s: return deferASM(BuiltinNames.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load8_u: return deferASM(BuiltinNames.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load16_s: return deferASM(BuiltinNames.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load16_u: return deferASM(BuiltinNames.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_load: return deferASM(BuiltinNames.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_load8_s: return deferASM(BuiltinNames.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load8_u: return deferASM(BuiltinNames.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load16_s: return deferASM(BuiltinNames.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load16_u: return deferASM(BuiltinNames.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load32_s: return deferASM(BuiltinNames.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load32_u: return deferASM(BuiltinNames.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_load: return deferASM(BuiltinNames.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_load: return deferASM(BuiltinNames.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_load: return deferASM(BuiltinNames.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.i32_store8: return deferASM(BuiltinNames.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_store16: return deferASM(BuiltinNames.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_store: return deferASM(BuiltinNames.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_store8: return deferASM(BuiltinNames.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store16: return deferASM(BuiltinNames.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store32: return deferASM(BuiltinNames.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_store: return deferASM(BuiltinNames.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.f32_store: return deferASM(BuiltinNames.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f64_store: return deferASM(BuiltinNames.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinNames.i32_atomic_load8_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_load16_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_load: return deferASM(BuiltinNames.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_load8_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load16_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load32_u: return deferASM(BuiltinNames.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_load: return deferASM(BuiltinNames.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_store8: return deferASM(BuiltinNames.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_store16: return deferASM(BuiltinNames.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_store: return deferASM(BuiltinNames.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_store8: return deferASM(BuiltinNames.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store16: return deferASM(BuiltinNames.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store32: return deferASM(BuiltinNames.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_store: return deferASM(BuiltinNames.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_add: return deferASM(BuiltinNames.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_add_u: return deferASM(BuiltinNames.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_add: return deferASM(BuiltinNames.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_sub: return deferASM(BuiltinNames.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_sub_u: return deferASM(BuiltinNames.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_sub: return deferASM(BuiltinNames.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_and: return deferASM(BuiltinNames.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_and_u: return deferASM(BuiltinNames.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_and: return deferASM(BuiltinNames.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_or: return deferASM(BuiltinNames.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_or_u: return deferASM(BuiltinNames.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_or: return deferASM(BuiltinNames.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_xor: return deferASM(BuiltinNames.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_xor_u: return deferASM(BuiltinNames.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_xor: return deferASM(BuiltinNames.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_xchg: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_xchg: return deferASM(BuiltinNames.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinNames.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinNames.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinNames.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinNames.i32_wait: return deferASM(BuiltinNames.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i64_wait: return deferASM(BuiltinNames.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinNames.v128_load: return deferASM(BuiltinNames.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinNames.v128_store: return deferASM(BuiltinNames.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i8x16_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_extract_lane_s: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinNames.i8x16_extract_lane_u: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinNames.i8x16_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_avgr_u: return deferASM(BuiltinNames.v128_avgr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add_saturate_s: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_add_saturate_u: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub_saturate_s: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_sub_saturate_u: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i8x16_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinNames.i8x16_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_narrow_i16x8_s: return deferASM(BuiltinNames.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i8x16_narrow_i16x8_u: return deferASM(BuiltinNames.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i16x8_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_extract_lane_s: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinNames.i16x8_extract_lane_u: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinNames.i16x8_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_avgr_u: return deferASM(BuiltinNames.v128_avgr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add_saturate_s: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_add_saturate_u: return deferASM(BuiltinNames.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub_saturate_s: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_sub_saturate_u: return deferASM(BuiltinNames.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i16x8_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinNames.i16x8_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_narrow_i32x4_s: return deferASM(BuiltinNames.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_narrow_i32x4_u: return deferASM(BuiltinNames.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_low_i8x16_s: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_low_i8x16_u: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_high_i8x16_s: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_widen_high_i8x16_u: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_load8x8_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.i16x8_load8x8_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i32x4_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_min_s: return deferASM(BuiltinNames.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_min_u: return deferASM(BuiltinNames.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_max_s: return deferASM(BuiltinNames.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_max_u: return deferASM(BuiltinNames.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_dot_i16x8_s: return deferASM(BuiltinNames.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinNames.i32x4_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_lt_s: return deferASM(BuiltinNames.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_lt_u: return deferASM(BuiltinNames.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_le_s: return deferASM(BuiltinNames.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_le_u: return deferASM(BuiltinNames.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_gt_s: return deferASM(BuiltinNames.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_gt_u: return deferASM(BuiltinNames.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ge_s: return deferASM(BuiltinNames.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_ge_u: return deferASM(BuiltinNames.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_low_i16x8_s: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_low_i16x8_u: return deferASM(BuiltinNames.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_high_i16x8_s: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_widen_high_i16x8_u: return deferASM(BuiltinNames.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_load16x4_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinNames.i32x4_load16x4_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinNames.i64x2_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinNames.i64x2_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_add: return deferASM(BuiltinNames.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shl: return deferASM(BuiltinNames.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shr_s: return deferASM(BuiltinNames.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_shr_u: return deferASM(BuiltinNames.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_any_true: return deferASM(BuiltinNames.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinNames.i64x2_all_true: return deferASM(BuiltinNames.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinNames.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinNames.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_load32x2_s: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.i64x2_load32x2_u: return deferASM(BuiltinNames.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinNames.f32x4_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinNames.f32x4_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_add: return deferASM(BuiltinNames.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_div: return deferASM(BuiltinNames.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_min: return deferASM(BuiltinNames.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_max: return deferASM(BuiltinNames.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_abs: return deferASM(BuiltinNames.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_sqrt: return deferASM(BuiltinNames.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_lt: return deferASM(BuiltinNames.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_le: return deferASM(BuiltinNames.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_gt: return deferASM(BuiltinNames.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_ge: return deferASM(BuiltinNames.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_convert_i32x4_s: return deferASM(BuiltinNames.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_convert_i32x4_u: return deferASM(BuiltinNames.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_qfma: return deferASM(BuiltinNames.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinNames.f32x4_qfms: return deferASM(BuiltinNames.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinNames.f64x2_splat: return deferASM(BuiltinNames.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_extract_lane: return deferASM(BuiltinNames.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinNames.f64x2_replace_lane: return deferASM(BuiltinNames.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_add: return deferASM(BuiltinNames.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_sub: return deferASM(BuiltinNames.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_mul: return deferASM(BuiltinNames.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_div: return deferASM(BuiltinNames.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_neg: return deferASM(BuiltinNames.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_min: return deferASM(BuiltinNames.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_max: return deferASM(BuiltinNames.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_abs: return deferASM(BuiltinNames.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_sqrt: return deferASM(BuiltinNames.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_eq: return deferASM(BuiltinNames.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_ne: return deferASM(BuiltinNames.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_lt: return deferASM(BuiltinNames.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_le: return deferASM(BuiltinNames.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_gt: return deferASM(BuiltinNames.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_ge: return deferASM(BuiltinNames.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_convert_i64x2_s: return deferASM(BuiltinNames.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_convert_i64x2_u: return deferASM(BuiltinNames.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_qfma: return deferASM(BuiltinNames.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinNames.f64x2_qfms: return deferASM(BuiltinNames.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinNames.v8x16_shuffle: return deferASM(BuiltinNames.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinNames.v8x16_swizzle: return deferASM(BuiltinNames.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinNames.v8x16_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinNames.v16x8_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinNames.v32x4_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinNames.v64x2_load_splat: return deferASM(BuiltinNames.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}